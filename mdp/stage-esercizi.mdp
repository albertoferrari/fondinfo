title: Esercizi stage
subtitle: Introduzione alla programmazione
figure: images/dev/geek-girl.jpg

---

title: Esercitazione 1
class: segue dark

---

title: 1.1 Cerchio
figure: images/misc/greek-pi.png

- Chiedere all'utente il valore del raggio `r` di un cerchio
- Mostrare il valore dell'area e della circonferenza
- Se `r` è negativo, però, mostrare un messaggio d'errore

code: python

    from math import pi
    # `pi` is a constant defined in the `math` module

---

title: 1.2 Minore e maggiore
figure: images/misc/three-brothers.png

- Generare e stampare tre numeri interi casuali: `a`, `b`, `c`
- Ciascuno compreso tra 1 e 6
- Determinare e mostrare qual è il minore dei tre

>

Controllare prima di tutto se `a` è minore degli altri due <br>
Altrimenti controllare se `b` è minore di `c` <br>
Altrimenti ...

---

title: 1.3 Quadrati casuali
figure: images/misc/random-squares.png

- Chiedere all'utente un numero `n`
- Disegnare `n` quadrati
    - Tutti con lato di 100 pixel
    - Ciascuno in posizione casuale
    - Ciascuno con un colore casuale

>

Cominciare a disegnare un solo quadrato grigio, in posizione casuale

---

title: 1.4 Cerchi concentrici
figure: images/misc/red-circles.png

- Chiedere all'utente il numero di cerchi da disegnare
- Disegnare i cerchi con raggio decrescente, ma tutti con lo stesso centro
- Far variare il colore dei cerchi
	  - Dal rosso del livello più esterno
	  - Fino al nero del livello più interno

>

Cominciare a disegnare un grosso cerchio rosso

Poi, inserire l'operazione di disegno un ciclo, togliendo ad ogni passo `10` (p.es.) al raggio e al livello di rosso

Infine, determinare automaticamente, prima del ciclo, le variazioni migliori per raggio e colore

---

title: 1.5 Numero segreto
figure: images/misc/bingo-balls.png

- Generare un intero “segreto” a caso tra 1 e 90
- Chiedere ripetutamente all'utente di immettere un numero, finché non indovina quello generato
- Ad ogni tentativo, dire se il numero immesso è maggiore o minore del numero segreto

---

title: 1.6 Interesse composto (*)
figure: images/misc/uncle-scrooge.png

- Dati dall'utente: capitale iniziale, tasso d'interesse, durata investimento
- Calcolare il capitale dopo ogni anno
- Es. 100€ al 4.5%: <br><br>

code: output

	Anno 0: 100.00€
	Anno 1: 104.50€
	Anno 2: 109.20€
	Anno 3: 114.12€ ...

>

Incolonnamento: `txt = f"{val:6.2f}"` <br>
`txt` rappresenta `val` con lunghezza ≥ 6, con 2 cifre decimali

---

title: 1.7 Conteggio cifre (*)
figure: images/repr/finger-counting.png

- Leggere un numero intero positivo
- Determinare di quante cifre è composto

>

Quante volte riusciamo a dividerlo per 10, prima che si annulli?

---

title: 1.8 Resistenze, ciclo (*)
figure: images/misc/resistors.png

- Leggere, attraverso un ciclo, una sequenza di valori di resistenze elettriche
- La sequenza termina quando l'utente immette il valore 0
- Alla fine, visualizzare la resistenza equivalente, sia nel caso di resistenze disposte in serie, che in parallelo

>

Formule utili:

R~~s~~ = ∑ R~~i~~

1/R~~p~~ = ∑ (1/R~~i~~)

---

title: 1.9 La stanza del mostro (*)
figure: images/misc/monster.png

- Il giocatore si muove su una scacchiera di 5x5 celle, partendo da un angolo
    - Le righe e le colonne sono numerate da 0 a 4
- Un tesoro ed un mostro sono nascosti due posizioni casuali, all'inizio del gioco
- Ad ogni turno, il giocatore:
    - Sceglie una direzione verso cui spostarsi (alto, basso, sinistra, destra)
    - Se capita sulla cella del tesoro, ha vinto
    - Se capita sulla cella del mostro, ha perso

---

title: Esercitazione 2
class: segue dark

---

title: 2.1 Conteggio cifre
figure: images/misc/numbers.jpg

- Chiedere una riga di testo all'utente
- Contare il numero complessivo di cifre presenti (da `'0'` a `'9'`)
- Valutare anche la somma di tutte le singole cifre trovate

>

Usare un ciclo `for` sulla stringa (sequenza di caratteri)

---

title: 2.2 Array, precalcolo
figure: images/misc/sin-cos.png

- Riempire una lista con i valori di `sin(x)`
    - 360 elementi, indice `x` tra 0 e 359
- Poi, ciclicamente...
	- Chiedere un angolo all'utente
	- Visualizzare il corrispondente valore precalcolato

code: python

    from math import pi, sin

`sin` opera su radianti: calcolare `sin(x * pi / 180)`, anzichè `sin(x)`

Creare una lista vuota, e poi aggiungere un valore alla volta con `append`
<br>
In alternativa, usare la `list comprehension`

---

title: 2.3 Ipotenusa
figure: images/misc/pythagorean-theorem.png

- Scrivere una `funzione` per il calcolo dell'ipotenusa di un triangolo rettangolo
    - Parametri: due cateti come `float`
    - Risultato: ipotenusa come `float`
- Nella parte principale del programma
    - Chiedere all'utente due valori,
    - Invocare la funzione con questi parametri
    - Visualizzare il risultato della funzione

code: python

    from math import sqrt

---

title: 2.4 Cerchi concentrici
figure: images/misc/red-circles.png

- Chiedere all'utente il numero di cerchi da disegnare
- Disegnare i cerchi con raggio decrescente, ma tutti con lo stesso centro
- Far variare il colore dei cerchi
	- Dal rosso del livello più esterno
	- Fino al nero del livello più interno

>

Cominciare a disegnare un grosso cerchio rosso

Poi, inserire l'operazione di disegno un ciclo, togliendo ad ogni passo `10` (p.es.) al raggio e al livello di rosso

Infine, determinare automaticamente, prima del ciclo, le variazioni migliori per raggio e colore

---

title: 2.5 Griglia di colori (*)
figure: images/misc/color-grid.png images/oop/raster-tile.png

- Chidere all'utente dei valori per `rows` e `cols`
- Mostrare una griglia di rettangoli di dimensione `rows×cols`
- Partire da un rettangolo nero in alto a sinistra
- In orizzontale, aumentare gradatamente la componente di blu
- In verticale, aumentare gradatamente la componente di verde

>

Cominciare a creare una griglia di riquadri tutti neri, con due cicli `for` annidati

Lasciare tra i riquadri un piccolo margine

---

title: 2.6 Serpentina (*)
figure: images/misc/winding-path.png

- Chidere all'utente dei valori per `rows` e `cols`
- Mostrare una griglia di rettangoli di dimensione `rows×cols`
- Partire da un rettangolo nero in alto a sinistra
- Aumentare gradatamente la componente di blu, lungo un percorso a serpentina

>

Per iniziare, seguire un più semplice percorso "a macchina da scrivere"

Poi invertire il verso delle righe con indice dispari

---

title: 2.7 Spirale (*)
figure: images/misc/spiral-circles.png

- Disegnare una sequenza di cerchi (`n` scelto dall'utente) lungo una spirale
- Alla prima implementazione, procedere su un percorso circolare di raggio `r`, attorno al punto `(xc, yc)`
- Poi, su una spirale, aumentando passo a passo anche `r`
- Infine, disegnare lungo il percorso dei cerchi sempre più grandi e di colore diverso

code: python

    xc, yc, r, angle = 320, 240, 40, 0.0
    for i in range(8):
        y = yc + int(r * math.sin(angle))
        x = xc + int(r * math.cos(angle))
        pygame.draw.circle(screen, (0, 0, 0), (x, y), 10)
        angle += math.pi / 4

---

title: 2.8 Movimento orizzontale (*)
figure: images/misc/street-fighter.jpg

- Mostrare una pallina che si muove in orizzontale
- La pallina rimbalza sui bordi
    - Memorizzare in una variabile `dx` lo spostamento orizzontale da effettuare ad ogni ciclo
    - Cambiare segno a `dx` quando `x < 0` oppure `x + w > screen_width`

---

title: 2.9 Pallina con gravità (*)
figure: images/misc/bouncing-ball.jpg

- All'esercizio precedente, aggiungere l'effetto di gravità
    - Memorizzare in una variabile `dy` lo spostamento verticale da effettuare ad ogni ciclo
    - La pallina parte con `dy = 0`
    - `dy` aumenta costantemente, ad ogni ciclo
    - Cambiare segno a `dy` quando `y + h > screen_height`

---

title: Esercitazione 3
class: segue dark

---

title: 3.1 Movimento a serpentina
figure: images/misc/science-of-spaceships.jpg


title: 3.1 Palline con gravità
figure: images/misc/bouncing-ball.jpg

- Riprendere l'esercizio 2.9, ma visualizzare numerose palline in movimento
- Incapsulare tutti i dati di una pallina in un oggetto Ball
- Dotare gli oggetti pallina di un metodo `move`, per farli avanzare
- ... e di un metodo `rect`, per ottenere la posizione attuale

---

title: 3.2 Tartaruga con gravità

- Partire dall'esempio fornito, con la tartaruga guidata dall'utente
    - <https://github.com/tomamic/fondinfo/tree/master/bounce>
- Aggiungere alla tartaruga un effetto gravità
    - Nel metodo `move`, incrementare `dy`
    - Fissare `dy_max`, un valore massimo per `dy`
    - La tartaruga inoltre si ferma sul fondo dello schermo
- Permettere alla tartaruga di saltare
    - Quando la tartaruga è sul fondo dello schermo, può saltare
    - Il salto comincia a comando dell'utente
    - All'inizio del salto, `dy = -dy_max`

---


