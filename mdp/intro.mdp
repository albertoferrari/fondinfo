title: Presentazione del corso
subtitle: Fondamenti di informatica + Lab
figure: images/misc/theory-practice.png

---

title: 1. Introduzione all'informatica
figure: images/sys/globe.jpg

- Rappresentazione dei dati
    - Numeri; testi; immagini; suoni
- Teoria della computazione
    - Linguaggi; automi e calcolabilità; complessità
- Sviluppo del software
    - Ciclo di vita; qualità e collaudo
- Sistemi di elaborazione
    - Calcolatori; sistemi operativi; Internet e Web

---

title: 2.  Introduzione alla programmazione
figure: images/misc/problem-solving.jpg
class: large-figure

- Algoritmi in *Python 3*
- Funzioni e oggetti
- Liste e composizione
- Ricorsione, file e matrici
- Linguaggio *C++11*

---

title: 3. Esercitazioni in laboratorio
figure: images/misc/geek-girl.jpg

- Esercizi di base, in Python
- Piccoli progetti a oggetti
    - Prima a riga di comando e poi con interfaccia grafica
    - Prima in Python e poi in C++
- **Attenzione**: non sono sufficienti le poche ore in laboratorio per imparare a programmare!
    - “Venite già studiati”
    - Completate tutti gli esercizi, a casa
    - Assiduità!

> If you wish to learn swimming you have to go into the water and if you wish to become a problem solver you have to solve problems. *(George Polya)*

---

title: Istruzioni per i laboratori

- Verificare in anticipo il proprio account per l'accesso ai lab
    - <http://www.cedi.unipr.it/gestioneaccounts>
- Esercitazioni ogni lunedì pomeriggio, *a scelta* su 2 turni
    - 13:30-15:30 *primo turno*, 15:30-17:30 *secondo turno*
- Possibile sviluppare da soli o in coppia
    - Ma tassativamente *non più di due!*
- Verifica esercitazioni
    - Alla fine di ogni esercitazione, consegna dei programmi in una cartella denominata con la propria matricola
    - Periodicamente, lavori consegnati sottoposti a *valutazioni intermedie*, non preannunciate

---

title: Tutor e assistenza

- Materiale di studio
    - *Libri* di testo e slide del corso
    - *Esercizi risolti* degli anni precedenti
    - <http://tomamic.github.io/fondinfo/>
- Durante le esercitazioni, assistenza di vari *tutor*
- A lezione
    - *Esempi* prima delle esercitazioni
    - *Soluzioni* di esercizi delle settimane precedenti
- Ogni mercoledì, *ricevimento* aperto a tutti, 12:30-14:30
    - Palazzina A della sede scientifica (~ biblioteca)

---

title: Esame
figure: images/misc/quiz.png

- **(1)** Prova sull'*Introduzione all'informatica* (quiz)
    - A fine corso, oppure...
    - Appelli usuali
- **(2)** Prova sull'*Introduzione alla programmazione* (lab)
    - Svolgimento esercitazioni in laboratorio, oppure…
    - Prova in appelli usuali (~3 ore)
- Le due prove si possono svolgere in tempi diversi e ciascuna resta valida per l'intero anno (fino ad ottobre)
- Il voto finale è determinato:
    - per 1/4 dalla teoria
    - per 3/4 dalla programmazione

---

title: Testi di riferimento
figure: images/misc/books.png

- *Fondamenti di informatica e lab.* McGraw-Hill 2014. ISBN 978-13-082-4813-4 (~25€, 250pp., nelle [librerie universitarie](http://www.informagiovanionline.it/emiliaromagna/parma/tempo-libero/godersi-larte-e-la-cultura/libri-in-rete/librerie-scolastiche-e-universitarie-parma) )
- A.B. Downey: *Think Python* 2e - <https://github.com/AllenDowney/ThinkPythonItalian>
- A.B. Downey: *How to Think Like a Computer Scientist C++ Version* - <http://greenteapress.com/thinkcpp/>
- M. Beri: *Python*, Apogeo Pocket 2010, 978-8850329151 (~8€)

---

title: Altri testi e video

- C. S. Horstmann: *Fondamenti di C++*, McGraw-Hill 2003, 978-8838661051 (~43€, 768pp.)
- S.B. Lippman, J. Lajoie, B.E. Moo: *C++ Primer* 5e, Addison Wesley 2012, 978-0321714114 (~36€, 940pp.)
- M. Dawson: *Python Programming for the Absolute Beginner* 3e, Course Tech. 2010, 978-1435455009 (~25€, 450pp.)
- M. Dawson: *Beginning C++ Through Game Programming* 4e, Course Tech. 2014, 978-1305109919 (~28€, 390pp.)
- MIT: *Intro to CS and Programming in Python* - [Video delle lezioni](https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-0001-introduction-to-computer-science-and-programming-in-python-fall-2016/lecture-videos/index.htm)
- Documentazione
    - [python.org](https://docs.python.org/3/) - [isocpp.org](http://isocpp.org/)
    - [cplusplus.com](http://cplusplus.com/reference/) - [cppreference.com](http://cppreference.com/)

---

title: Software
figure: images/dev/python.png images/dev/codeblocks.png

- Strumenti open source, multi-piattaforma
    - [**Python.org**](https://www.python.org/downloads/release/python-370/#windows-users), v3.7, *battery included*
    - [Playground Python](http://www.ce.unipr.it/brython/)
    - [**CodeBlocks.org**](http://codeblocks.org/downloads/26), C++ IDE, con MinGW e setup
- Installare Ubuntu in una VirtualBox
    - [WikiHow.com](https://www.wikihow.com/Install-Ubuntu-on-VirtualBox)

code: Shell

    ## Ubuntu, Debian etc.
    sudo apt install idle3 python3-pip codeblocks build-essential
    pip3 install pygame cppyy

---

title: Problem solving
figure: images/misc/problem-solving-cycle.svg
class: large-figure

- George Polya (1945). “_How to solve it_”
    - Soluzione di problemi matematici: processo raramente lineare <br>&nbsp;
- **(1) See.** Capire il problema
    - Quali dati? Quali incognite?
    - Quali condizioni? Soddisfacibili, ridondanti, contraddittorie?
    - Figure, notazione

> Make things as simple as possible, but not simpler. *(A. Einstein)*

> For every complex problem there is an answer that is clear, simple, and wrong. *(H.L. Mencken)*

---

title: Dal problema alla soluzione, e ritorno

- **(2) Plan.** Elaborare un piano
    - Mettere in relazione dati e incognite
    - Riduzione, analogia, divide et impera, composizione, astrazione... *Pensiero computazionale*
    - Cominciare a risolvere un problema *più semplice* (vincoli rilassati)
- **(3) Do.** Implementare il piano
    - Realizzare il sistema da sperimentare
- **(4) Check.** Controllare la soluzione
    - Corretta? Ottenibile in altro modo?
    - Risultato, o metodo, utilizzabile per altri problemi?

> If you can't solve a problem... <br> then there is an easier problem you can solve: find it. *(G. Polya)*


---

title: Ricerca in uno schedario (++)
figure: images/algo/catalogue.png

- Es. in biblioteca: cercare la scheda di un certo libro
    - **(1)** *Finchè* restano delle schede da esaminare: si prende la prima scheda non ancora controllata
    - **(2)** *Se* autore e titolo sono quelli cercati: scheda trovata, ricerca conclusa!
    - **(3)** (Altrimenti...) <br> *Si ripete* il controllo (1), passando alla scheda successiva
    - **(4)** Esaurite le schede, il libro non è nella biblioteca!

---

title: Cercare più velocemente (++)

- Su schedario *ordinato* si può fare più in fretta
    - **(1)** *Finchè* restano delle schede da esaminare: si prende tra loro la scheda centrale
    - **(2)** *Se* autore e titolo sono quelli cercati: scheda trovata, ricerca conclusa!
    - **(3)** *Altrimenti, se* autore e titolo vengono dopo quelli cercati: si scartano subito tutte le schede successive
    - **(4)** *Altrimenti, infine*: si scartano le schede precedenti
    - **(5)** *Si ripete* la ricerca sull'insieme dimezzato (1)
    - **(6)** Esaurite le schede, il libro non è nella biblioteca!

---

title: Complessità e calcolabilità (++)

- **Complessità**: classificare algoritmi (e problemi)
    - **Trattabili**: costo accettabile, “polinomiale”
    - **Non trattabili**: costo “esponenziale”
- **Calcolabilità**: distinguere i problemi **non risolvibili**
    - Es. Valore di verità di `P`: *Questa frase è falsa*
    - Incompletezza Gödel; indecidibilità *terminazione*
    - ∀ formalizzazione della matematica che assiomatizza ℕ <br> → ∃ proposizione né dimostrabile né confutabile

---

title: Diagramma di flusso
figure: images/algo/origami.png
figcaption:Anche un origami è un esempio di algoritmo

- *Flow-chart*: Rappresentazione grafica di algoritmi
    - Più efficace e meno ambigua di una descrizione a parole
- Due tipi di entità:
    - Nodi
    - Archi
- È un *grafo orientato*
    - Passi di un algoritmo e loro sequenza

---

title: Tipi di nodi
figure: images/algo/spaghetti-flowchart.png

![](images/algo/nodes.svg)

- Istruzioni di I/O: es. leggere dati da tastiera o mostrarli a schermo
- Operazioni aritmetico-logiche
- Controllo del flusso di esecuzione

---

title: Programmazione strutturata
figure: images/algo/spaghetti-code.png

- Strutture di controllo:
    - **Sequenza**
    - **Selezione**
    - **Iterazione**

> Qualunque algoritmo può essere implementato utilizzando queste tre sole strutture *(Teorema di Böhm-Jacopini, 1966)*

> Goto statement considered harmful *(Dijkstra, 1968)*

---

title: Strutture di controllo

![](images/algo/structures.svg)

- Esempi quotidiani di `if` e `while`:
    - “*Se non c'è il lievito, usare due cucchiaini di bicarbonato*”
    - “*Battere gli albumi finché non montano*”

---

title: Blockly
class: large-image

![](images/algo/blockly.png)

>

<http://blockly-games.appspot.com/maze>

---

title: Esempi di progetti
class: segue dark

---

title: Super Mario
figure: images/misc/super-mario.jpg

- *Mario*: guidato dal giocatore
    - Si muove e salta sulle piattaforme
    - Cade secondo gravità, fuori dalle piattaforme
    - Ma non accelera oltre una velocità limite
    - Muore se cade in fondo allo schermo
- *Muri e piattaforme*
    - Mario ci atterra dall'alto
    - Non si possono attraversare in nessuna direzione
- *Avversari*
    - Si muovono sulle piattaforme come Mario, ma scelgono casualmente la direzione
    - Uccidono Mario se lo urtano, ma muoiono se Mario ci salta sopra

---

title: Pac-Man
figure: images/misc/pac-man.png

- *Pac-Man*
    - Guidato dal giocatore, con la tastiera
    - Applica i comandi solo solo agli incroci
- *Fantasmi*
    - Uccidono Pac-Man se lo toccano
    - Agli incroci svoltano casualmente
    - Ma non tornano mai indietro!
- *Biscotti*
    - Pac-Man deve mangiarli tutti, per terminare il gioco
- *SuperBiscotti*
    - Danno per breve tempo a Pac-Man il potere di mangiare i fantasmi

---

title: Slitherlink
figure: images/misc/slitherlink-solved.png

- Regole
    - Connect adjacent dots with vertical or horizontal lines to make a single loop
    - The numbers indicate how many lines surround it, while empty cells may be surrounded by any number of lines
    - The loop never crosses itself and never branches off

>

<http://www.nikoli.com/en/puzzles/slitherlink/>

<https://www.brainbashers.com/slitherlinkhelp.asp>

---

title: Bubble Bobble
figure: images/misc/bubble-bobble.png

- *Draghetto*: guidato dal giocatore
    - Si muove e salta sulle *piattaforme*
    - Muore se cade in fondo allo schermo
- *Avversari*
    - Saltano come il draghetto sulle *piattaforme*
    - Ma scelgono casualmente la direzione
    - Uccidono il draghetto se lo urtano
- *Bolle*
    - Lanciate in orizzontale dal draghetto
    - Dopo un po' deviano verso l'alto
    - Catturano gli avversari che urtano

---

title: Hitori
figure: images/misc/hitori.svg images/misc/hitori-completed.svg

- Regole
    - Color cells so no number appears more than once in a row or column
    - The sides of black cells never touch
    - White cells form a continuous network
- Ad ogni mossa, permettere all'utente di annerire un numero, oppure cerchiarlo
    - Controllare la violazione delle regole
    - Controllare il completamento del gioco (ogni numero: correttamente annerito o cerchiato) 

>

<http://www.nikoli.com/en/puzzles/hitori>

---

title: Snake
figure: images/misc/snake.png

- **Serpente**: guidato dal giocatore
    - Avanza continuamente
    - Non può tornare indietro
    - Se tocca se stesso, muore
- **Cibo**: disposto casualmente
    - Il serpente si allunga dopo aver mangiato
- **Muri**: in posizione fissa
    - Il serpente muore se ci va a sbattere

---

title: Campo minato
figure: images/misc/mines.png

- N <b>mine nascoste</b> a caso in tabella rettangolare
- Ad ogni turno, l'utente scopre una casella:
    - Mina → <i>partita persa</i>
    - Solo N caselle coperte (con mine) → <i>partita vinta</i>
    - Altrimenti, <i>conteggio mine</i> nelle 8 caselle adiacenti

---

title: Akari - Light up
figure: images/misc/akari.svg

- Scopo: <b>illuminare</b> tutte le celle bianche
    - Una lampada illumina tutte le celle visibili sulla sua riga e la sua colonna
    - Due lampade non possono illuminarsi a vicenda
    - Vincolo numerico: # lampade nelle 4 celle adiacenti

>

<http://www.nikoli.com/en/puzzles/bijutsukan/rule.html>

---

title: Othello
figure: images/misc/othello.png

- In due, bianco e nero
    - All'inizio: 2 coppie di pedine al centro, incrociate
    - A turno, ciascun giocatore aggiunge una pedina
    - È obbligatorio catturare, se non ci sono mosse si passa il turno
- Se viene *circondata una fila* di pedine avversarie, queste cambiano tutte colore
- Vince chi alla fine ha più pedine

---

title: Pong
figure: images/misc/pong.png

- Campo rettangolare
- **Pallina**: si muove a 45°, rimbalza su bordi lunghi e barrette
- **Barrette**: si muovono solo verticalmente
- **Punti**: segnati quando la pallina esce dal campo

---

title: Frogger
figure: images/misc/frogger.png

- **Rana** guidata dall'utente, salta in 4 direzioni: ↕ ↔
- Deve attraversare la strada, senza essere investita dai **camion**
- Deve attraversare il fiume, saltando sui **tronchi**

---

title: Space invaders
figure: images/misc/invaders.png

- **Cannone**: l'utente lo sposta in orizzontale; spara verso l'alto, contro gli alieni
- **Alieni**: si muovono tutti nella stessa direzione; percorso a serpentina; sparano verso il basso, contro il cannone
- **Muri**: si ditruggono lentamente dove colpiti

---

title: Tents puzzle
figure: images/misc/tents.png

- Posizionare tende sulla griglia, in modo che ogni albero sia *assegnato* ad una tenda
    - Inizialmente, nessun albero è assegnato ad una tenda
    - Tenda adiacente (in orizzontale o verticale) ad un solo albero non assegnato ⇒ albero *assegnato* a quella tenda
    - Tante tende, quanti sono gli alberi
- Le tende non possono toccarsi tra loro, nemmeno in diagonale
- Vincoli numerici fuori dalla griglia: numero di tende nella riga o colonna

>

<http://www.brainbashers.com/tentshelp.asp>

---

title: Donkey Kong
figure: images/misc/donkey-kong.png

- Maro può camminare sulle piattaforme
- Può saltare, se è su una piattaforma
- Deve evitare i barili
- Cade quando esce dalla piattaforma

---

title: Sudoku Skyscrapers
figure: images/misc/skyscrapers.jpg

- Celle tutte piene
- Nessun numero ripetuto in una riga o colonna
- Rispetto dei vincoli a margine
    - Numero di tetti visibili, da quella posizione

>

<https://www.brainbashers.com/skyscrapers.asp>

---

title: Istruzioni per i laboratori
class: break

- Verificare in anticipo il proprio account per l'accesso ai lab
    - <http://www.cedi.unipr.it/gestioneaccounts>
- Esercitazioni ogni lunedì pomeriggio, su 2 turni distinti
    - 13:30-15:30 *matricole pari*, 15:30-17:30 *matricole dispari*
- Possibile sviluppare da soli o in coppia
    - Ma tassativamente *non più di due!*
    - Se si sviluppa in coppia, turno determinato dalla matricola minore
- Verifica esercitazioni
    - Alla fine di ogni esercitazione, consegna dei programmi in una cartella denominata con la propria matricola
    - Periodicamente, lavori consegnati sottoposti a *valutazioni intermedie*, non preannunciate


