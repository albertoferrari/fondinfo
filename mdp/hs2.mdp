title: Haskell
subtitle: Functional programming
figure: images/fun/haskell-logo.png

---

title: Recursion
figure: images/fun/matryoshka.png

> If you still don't know what recursion is, read this sentence

- Recursion is a way of defining f.s
    - The f. is applied inside its own definition
- Definitions in maths are often given recursively; ex.: Fibonacci sequence
    - `F(0) = 1; F(1) = 1`  (*edge condition*)
    - `F(n) = F(n-1) + F(n-2)`
    - => `F(3) = F(2)+F(1) = (F(1)+F(0))+F(1) = 3`
- An element defined non-recursively, for termination
- No loops in Haskell, recursion to *declare* what something is

---

title: Maximum function

- Takes a list of things that can be ordered (`Ord` typeclass)
- Returns the biggest of them
- *Imperative paradigm*
    - A variable to hold the maximum value so far
    - Loop through the elements
- *Recursive definition*
    - Edge condition, for a singleton list: the maximum is the only element in it
    - Longer list: the maximum is the head, if it is bigger than the maximum of the tail; else, the maximum of the tail

---

title: Maximum with recursion

code: haskell

    maximum' :: (Ord a) => [a] -> a
    maximum' [] = error "maximum of empty list"
    maximum' [x] = x
    maximum' (x:xs)
        | x > maxTail = x
        | otherwise = maxTail
        where maxTail = maximum' xs

- *Pattern* to split a list into head and tail
    - Common idiom when doing recursion with lists
    - Otherwise, a lot of `if-else` statements

>

Example list of numbers, check out how this would work on them: [2,5,1]

---

title: Maximum with max

- `max` takes two numbers and returns the bigger

code: haskell

    maximum' :: (Ord a) => [a] -> a
    maximum' [] = error "maximum of empty list"
    maximum' [x] = x
    maximum' (x:xs) = max x (maximum' xs)

![](images/fun/maxs.png)

---

title: Replicate with recursion

- `replicate` takes an `Int` and some element
- Returns a list with repetitions of same element
- For instance, `replicate 3 5` returns `[5,5,5]`
- Edge condition: replicate something zero times (or less) → empty list

code: haskell

    replicate' :: (Num i, Ord i) => i -> a -> [a]
    replicate' n x
        | n <= 0    = []
        | otherwise = x:replicate' (n-1) x

- Guards instead of patterns: testing for a boolean condition

---

title: Take with recursion

- `take` takes a certain number of elements from a list
- For instance, `take 3 [5,4,3,2,1]` returns `[5,4,3]`
- Edge conditions
    - Take 0 or less elements from a list → empty list
    - Take anything from an empty list → empty list

code: haskell

    take' :: (Num i, Ord i) => i -> [a] -> [a]
    take' n _
        | n <= 0   = []
    take' _ []     = []
    take' n (x:xs) = x : take' (n-1) xs

>

Guard, without an `otherwise` part: if `n > 0`, the matching falls through to the next pattern

---

title: Reverse with recursion

- Edge condition: the empty list!
- Split a list to a head and a tail, the result is the reversed tail and then the head at the end

code: haskell

    reverse' :: [a] -> [a]
    reverse' [] = []
    reverse' (x:xs) = reverse' xs ++ [x]

---

title: Infinite recursion

- Haskell is *lazy* and supports infinite lists
- Recursion without edge condition
- `repeat` takes an element and returns an infinite list...

code: haskell

    repeat' :: a -> [a]
    repeat' x = x:repeat' x

- `repeat 3` evaluates like `3:repeat 3`, which is `3:(3:repeat 3)`...
- `repeat 3` gives us a list that starts with 3, and then has an infinite amount of 3's as a tail
- `take 5 (repeat 3)` will give us a list of five 3's
- Essentially it's like doing `replicate 5 3`

---

title: Zip with recursion

- `zip [1,2,3] [2,3]` returns `[(1,2),(2,3)]`
- Truncates the longer list to match the shorter
- zip something with an empty list => empty list (*edge conditions*)

code: haskell

    zip' :: [a] -> [b] -> [(a,b)]
    zip' _ [] = []
    zip' [] _ = []
    zip' (x:xs) (y:ys) = (x,y):zip' xs ys

>

Ex.: `zip [1,2,3] ['a','b']`

---

title: Elem with recursion

- `elem` takes an element and a list and sees if that element is in the list
    - If the head isn't the element, then we check the tail
    - If we reach an empty list, the result is `False` (edge condition)

code: haskell

    elem' :: (Eq a) => a -> [a] -> Bool
    elem' a [] = False
    elem' a (x:xs)
        | a == x    = True
        | otherwise = a `elem'` xs

---

title: Quicksort
figure: images/fun/quicksort.png
class: large-figure

- List of comparable things (`Ord`)
- Edge condition: empty list
- Algorithm:
    - All values `≤` head, in front (and those values are sorted)
    - Then, head (*pivot*) in the middle
    - Then, all values `>` head (they're also sorted)
- Idea:
    - We said “sorted” two times in this definition: recursion
    - Filter to get only some elements: list comprehensions

code: haskell

    quicksort :: (Ord a) => [a] -> [a]

---

title: Haskell poster child

code: haskell

    quicksort :: (Ord a) => [a] -> [a]
    quicksort [] = []
    quicksort (x:xs) =
        let smallerSorted = quicksort [a | a <- xs, a <= x]
            biggerSorted = quicksort [a | a <- xs, a > x]
        in  smallerSorted ++ [x] ++ biggerSorted

code: haskell

    Prelude> quicksort [5,1,9,4,6,7,3]
    [1,3,4,5,6,7,9]
    Prelude> quicksort "the quick brown fox jumps over the lazy dog"
    "        abcdeeefghhijklmnoooopqrrsttuuvwxyz"

---

title: Thinking recursively

- Thought pattern
    - Usually you define an edge case, ...
    - then you define a f., operating on some element and...
    - the same f. applied to the rest
- Examples
    - Sum: the first element plus the sum of the rest
    - Product: the first element times the product of the rest
    - Length of a list: one plus the length of the tail
- With lists, edge case is most often the empty list
- With numbers, edge case is often an identity

---

title: Ex.: Merge sort

- Define a `merge` function
    - Takes two sorted lists
    - Returns a sorted list, with all the elems
- Define a `mergeSort` function
    - Takes a list
    - Splits it at half
    - Sorts each part, recursively
    - Merges the two sorted parts

---

title: Traditional recursion example
figure: images/fun/stack.svg

code: haskell

    factorial 0 = 1
    factorial n = n * factorial (n - 1)

code: haskell

    Prelude> factorial 3
    6

- Perform recursive call first
- Then use its result to calculate the new result

---

title: Tail recursion example
figure: images/fun/stack-tr.svg

code: haskell

    fact_tr 0 acc = acc
    fact_tr n acc = fact_tr (n - 1) (n * acc)

    factorial' n = fact_tr n 1

code: haskell

    Prelude> factorial' 3
    6
    Prelude> fact_tr 3 1
    6

- Perform calculations first
- Then perform recursive call, passing current results to the next recursive step
- Return val of any recursive step is the same

---

title: Tail recursion optimization
figure: images/fun/stack-tr.svg

code: c

    int fact_tr(int n, int acc) {
        if (n == 0) return acc;
        return fact_tr(n - 1, acc * n);
    }

- Observe last statement, with recursive call
    - Once ready to perform the next recursive step...
    - You don't need the current *stack frame* any more!
- **Optimization**: *reuse the current stack frame* for the next recursive step

---

title: Ex.: Reverse with tail recursion

code: haskell

    reverse' :: [a] -> [a]
    reverse' [] = []
    reverse' (x:xs) = reverse' xs ++ [x]

- Inefficient
- Define `reverse` with tail recursion

---

title: Higher order functions
class: segue dark

---

title: Higher order functions

- **Higher order functions**
    - Haskell functions can take functions as parameters and return functions as return values
    - A function that does either of those is called a *higher order function*
    - Essential feature of the language, indispensable for the functional paradigm
- **Curried functions**
    - Every function in Haskell officially only takes one parameter (!)
    - What's the “trick” for functions that take more than one parameter?
    - All the functions that accepted several parameters so far have been *curried* functions

---

title: Curried functions

- Apparently... the `max` function takes two `Ord` parameters and returns the one that's bigger
- In reality, the following two calls are equivalent:

code: haskell

    Prelude> max 4 5
    5
    Prelude> (max 4) 5
    5

- `max 4 5` first creates a f. that takes a param
- Returns either 4 or that param, depending on which is bigger
- Then, 5 is applied and that f. produces our desired result

>

The space is like an operator, for function application, which has the highest precedence

---

title: Currying and function types

- Let's examine the type of `max`:
    - `max :: (Ord a) => a -> a -> a`
    - `max :: (Ord a) => a -> (a -> a)  -- same as above`
- Read as:
    - `max` takes an `a`...
    - and returns (that's the `->`) a function...
    - that takes an `a` and returns an `a`
- Currying is the reason why the return type and the parameters of functions are all simply separated with arrows

---

title: Partially applied functions

- If we call a f. with too few parameters, we get back a partially applied f.
- The returned f. takes as many parameters as we left out
- Using partial application is a neat way to create f.s on the fly

code: haskell

    multThree :: (Num a) => a -> a -> a -> a
    multThree x y z = x * y * z

- `multThree 3 5 9` or `((multThree 3) 5) 9`
    - First, `3` is applied to `multThree`; that creates a f. that takes one parameter and returns a f.
    - So then `5` is applied to that, which creates a f. that takes one parameter and multiply it by `15`
    - `9` is applied to that function, so the result is `135`

---

title: Function types

code: haskell

    multThree :: (Num a) => a -> a -> a -> a

- The thing before the `->` is the parameter that a f. takes
- The thing after it is what it returns

code: haskell

    multThree :: (Num a) => a -> (a -> (a -> a))  -- same as above

- Our f. takes an `a` and returns a f. of type
    - `(Num a) => a -> (a -> a)`
- Similarly, this f. takes an `a` and returns a f. of type
    - `(Num a) => a -> a`
- And this f., finally, just takes an `a` and returns an `a`

---

title: Partial application

- By calling functions with too few parameters, we're creating new functions on the fly

code: haskell

    Prelude> let multTwoWithNine = multThree 9
    Prelude> multTwoWithNine 2 3
    54
    Prelude> let multWithEighteen = multTwoWithNine 2
    Prelude> multWithEighteen 10
    180

---

title: Currying for creating functions

code: haskell

    compareWithHundred :: (Num a, Ord a) => a -> Ordering
    compareWithHundred x = compare 100 x

- Function that takes a number and compares it to 100
- Notice that the `x` is *on the right hand* on both sides of the equation
- However, `compare 100` returns a function, that takes a number and compares it with 100
- The type declaration stays the same

code: haskell

    compareWithHundred :: (Num a, Ord a) => a -> Ordering
    compareWithHundred = compare 100

---

title: Function sections

- Operators and infix functions can also be partially applied
    - **Section**: surround f. with parentheses and only supply a parameter on one side
    - That creates a f. that takes just one parameter (the missing operand)
- Examples:
    - Divide a number by 10
    - Check if a char is uppercase

code: haskell

    divideByTen :: (Floating a) => a -> a
    divideByTen = (/10)

    isUpperAlphanum :: Char -> Bool
    isUpperAlphanum = (`elem` ['A'..'Z'])

---

title: Defining higher-order functions

- F.s can take f.s as parameters and also return f.s
- Ex.: a f. that takes a f., and then applies it twice to something

code: haskell

    applyTwice :: (a -> a) -> a -> a
    applyTwice f x = f (f x)

- Type declaration: parentheses because `->` is naturally right-associative
    - The first parameter is a function that takes something and returns that same thing
    - The second parameter is something of that type also
    - The return value is also of the same type

---

title: Example of high-order function

code: haskell

    Prelude> applyTwice (+3) 10
    16
    Prelude> applyTwice (++ " HAHA") "HEY"
    "HEY HAHA HAHA"
    Prelude> applyTwice ("HAHA " ++) "HEY"
    "HAHA HAHA HEY"
    Prelude> applyTwice (multThree 2 2) 9
    144
    Prelude> applyTwice (3:) [1]
    [3,3,1]

- Our f. requires us to pass it a f. that takes only one param
- We can just partially apply a f. to the point where it takes only one param and then pass it

---

title: The zipWith function

- In the standard library, `zipWith` takes a f. and two lists
- It joins the two lists by applying the f. between corresponding elements
    - 1st param is a f. that takes two things and produces a third thing
    - 2nd and 3rd parameter are lists (of types `a` and `b`)
    - Result is also a list (of type `c`)

code: haskell

    zipWith' :: (a -> b -> c) -> [a] -> [b] -> [c]
    zipWith' _ [] _ = []
    zipWith' _ _ [] = []
    zipWith' f (x:xs) (y:ys) = f x y : zipWith' f xs ys

---

title: Using zipWith

- Pretty similar to the normal zip, with a joining function

code: haskell

    Prelude> zipWith (+) [4,2,5,6] [2,6,2,3]
    [6,8,7,9]
    Prelude> zipWith max [6,3,2,1] [7,3,1,5]
    [7,3,2,5]
    Prelude> zipWith (++) ["foo ", "bar ", "baz "]
                          ["fighters", "hoppers", "aldrin"]
    ["foo fighters","bar hoppers","baz aldrin"]
    Prelude> zipWith (zipWith (*)) [[1,2,3],[3,5,6],[2,3,4]]
                                   [[3,2,2],[3,4,5],[5,4,3]]
    [[3,4,6],[9,20,30],[10,12,12]]

---

title: The flip function

- In the standard library, `flip` takes a f. and returns a f.
    - The returned f. is like the original one, only the first two arguments are flipped
    - It takes a f. that takes an `a` and a `b`
    - It returns a f. that takes a `b` and an `a`

code: haskell

    flip' :: (a -> b -> c) -> (b -> a -> c)
    flip' f y x = f x y

code: haskell

    Prelude> flip zip [1,2,3,4,5] "hello"
    [('h',1),('e',2),('l',3),('l',4),('o',5)]
    Prelude> zipWith (flip div) [2,2..] [10,8,6,4,2]
    [5,4,3,2,1]

---

title: Mapping and filtering
class: segue dark

---

title: The map function

- It takes a f. and a list
- It applies that f. to every element in the list
- It produces a new list

code: haskell

    map' :: (a -> b) -> [a] -> [b]
    map' _ [] = []
    map' f (x:xs) = f x : map' f xs

---

title: Using map

- `map` is a really versatile higher-order function, can be used in many different ways
- These could be achieved with a list comprehension, but `map` can be more readable

code: haskell

    Prelude> map (+3) [1,5,3,1,6]
    [4,8,6,4,9]
    Prelude> map (++ "!") ["BIFF", "BANG", "POW"]
    ["BIFF!","BANG!","POW!"]
    Prelude> map (replicate 3) [3..6]
    [[3,3,3],[4,4,4],[5,5,5],[6,6,6]]
    Prelude> map (map (^2)) [[1,2],[3,4,5,6],[7,8]]
    [[1,4],[9,16,25,36],[49,64]]
    Prelude> map fst [(1,2),(3,5),(6,3),(2,6),(2,5)]
    [1,3,6,2,2]

---

title: The filter function

- It takes a predicate (a f. that returns a bool) and a list
- It returns the list of elements that satisfy the predicate

code: haskell

    filter' :: (a -> Bool) -> [a] -> [a]
    filter' _ [] = []
    filter' p (x:xs)
        | p x       = x : filter' p xs
        | otherwise = filter' p xs

---

title: Using filter

code: haskell

    Prelude> filter (>3) [1,5,3,2,1,6,4,3,2,1]
    [5,6,4]
    Prelude> filter even [1..10]
    [2,4,6,8,10]
    Prelude> filter (`elem` ['a'..'z']) "u LaUgH aT mE BeCaUsE I aM diFfeRent"
    "uagameasadifeent"

code: haskell

    quicksort :: (Ord a) => [a] -> [a]
    quicksort [] = []
    quicksort (x:xs) =
        let smallerSorted = quicksort (filter (<=x) xs)
            biggerSorted = quicksort (filter (>x) xs)
        in  smallerSorted ++ [x] ++ biggerSorted

---

title: Map and filter

- Mapping and filtering is the bread and butter of every functional programmer
    - Imperative programming: nesting loops and testing
    - Functional programming: mapping and filtering (or comprehensions)
- Ex.: largest number under 100,000 that's divisible by 3829

code: haskell

    largestDivisible :: (Integral a) => a
    largestDivisible = head (filter p [100000,99999..])
        where p x = x `mod` 3829 == 0

---

title: The takeWhile function

- It takes a predicate and a list
- It goes from the beginning of the list and returns its elements while the predicate holds true
- Once an element is found for which the predicate doesn't hold, it stops

code: haskell

    Prelude> takeWhile (/=' ') "elephants know how to party"
    "elephants"

---

title: Ex.: Odd squares

- Sum of all odd squares that are smaller than 10,000
- Laziness: map over and filter an infinite list

>

166650

---

title: Collatz sequences

- Take a natural number `n`
- If `n` is even, divide it by `2`
- If it's odd, multiply it by `3` and then add `1`
- Take the resulting number and apply the same thing to it...
- *Conjecture*: for all starting numbers, the chains finish at the number `1` (edge, cycle `1-4-2-1`)

code: haskell

    collatz :: (Integral a) => a -> [a]
    collatz 1 = [1]
    collatz n
        | even n =  n:collatz (n `div` 2)
        | odd n  =  n:collatz (n*3 + 1)

>

https://www.jasondavies.com/collatz-graph/

---

title: Ex.: Collatz
figure: images/fun/collatz-xkcd.png
class: large-figure

- For all starting numbers between 1 and 100...
- How many Collatz chains have a length greater than 15?

>

66

---

title: Using map to create functions

- So far, we've only mapped f.s that take one parameter over lists, like `map (*2) [0..]`
- We can also do `map (*) [0..]` without a problem
    - We get back a list of f.s that only take one param
    - `[(0*),(1*),(2*),(3*),(4*),(5*)`...
    - Applying only one param to a f. that takes two params...
    - Returns a f. that takes one param

code: haskell

    Prelude> let listOfFuns = map (*) [0..]
    Prelude> (listOfFuns !! 4) 5
    20

---

title: Lambda

- An anonymous f., needed only once, e.g., to be passed to a higher-order f.
- A *lambda* starts with a `\` (~ greek letter lambda), followed by params, a `->`, finally the body
- Usually, surrounded by parentheses

code: haskell

    numLongChains :: Int
    numLongChains = length (filter (\xs -> length xs > 15)
                                   (map collatz [1..100]))

---

title: Lambdas and currying

- The expression `(\xs -> length xs > 15)` returns a f.
- Functional programmers often replace lambdas with currying and partial application
    - `map (+3) [1,6,3,2]`
    - `map (\x -> x + 3) [1,6,3,2]`

- Like normal functions, lambdas can take any number of parameters:

code: haskell

    Prelude> :set +m
    Prelude> let xs = zipWith (\a b -> (a * 30 + 3) / b)
    Prelude|                  [5,4,3,2,1] [1,2,3,4,5]
    Prelude|
    Prelude> xs
    [153.0,61.5,31.0,15.75,6.6]

---

title: Closure

- Lambdas can use *free variables*
    - Names that are not bounded as params
    - Mechanism often called *closure*

code: haskell

    map (\x -> x + 3) [1,6,3,2]

    map (let n = 3 in \x -> x + n) [1,6,3,2]

code: haskell

    f a b c = a * b + c

    f' a b = \c -> a * b + c

---

title: Python's corner
class: segue dark

---

title: Partials

- Python has a `partial` f. in `functools` module
    - Returns a `partial` object, which is callable
    - “Freezes” some params, f. with simpler signature

code: python

    >>> from functools import partial
    >>> pow(2, 5)
    32
    >>> pow2 = partial(pow, 2)
    >>> pow2(5)
    32
    >>> basetwo = partial(int, base=2)
    >>> basetwo('10010')
    18

---

title: Callable objects

- Callable: any object with `__call__` method
- `foo()` is interpreted as `foo.__call__()`

code: python

    class Multiplier:
        def __init__(self, to_mul):
            self._to_mul = to_mul

        def __call__(self, val):
            return self._to_mul * val

code: python

    >>> triple = Multiplier(3)
    >>> triple(5)
    15

>

Also in C++, `operator()` can be overloaded, to create a so-called *function object* or *functor*

---

title: Map function

- *Higher order f.*: takes as params a f. and a sequence
- Applies the f. to each value in the sequence
- Returns the sequence of results

code: python

    >>> from math import sqrt
    >>> values = [0, 1, 2, 3, 4]
    >>> list(map(sqrt, values))
    [0.0, 1.0, 1.4142, 1.7320, 2.0]

code: python

    >>> from math import sqrt
    >>> list(map(sqrt, range(5)))
    [0.0, 1.0, 1.4142, 1.7320, 2.0]

---

title: Multiprocessing

- Module for working with multiple processes
- A `Pool` object represents a pool of processes
- Provides a `map` method for parallel application of a f.
    - Accepts a f., or...
    - Any callable object (with `__call__` method),
    - Including a `partial` object (“freezing” some params of a f.)

code: python

    from multiprocessing import Pool

    with Pool(5) as p:
        print(p.map(sqrt, [1, 2, 3]))

>

Example: PaNDEMON

Note: *lambdas* are not *pickable*...

---

title: Lambda functions

- Anonymous function, body is a *single expression*
    - For a longer body, use a (nested) `def`
- Closure for referenced variables (*by ref*)
    - To get stg *by val*, add it as a default param

code: python

    >>> sorted([3, -4, 5, -2])
    [-4, -2, 3, 5]
    >>> sorted([3, -4, 5, -2], key=abs)
    [-2, 3, -4, 5]
    >>> sorted([3, -4, 5, -2], key=lambda x:1/x)
    [-2, -4, 5, 3]

>

Example: behaviours of GUI widgets

---

title: Reduce
figure: images/fun/foldl.png

- `reduce` f. in `functools` module
    - Takes a f., a sequence and an (optional) initial value
    - The f. is applied repeatedly, on previous result and next value in sequence
    - Without initial value, f. is applied to first 2 elements
    - Similar to Haskell *folding*

code: python

    >>> from functools import reduce
    >>> reduce(lambda a, b: a + b, [3, 5, 2, 1], 0)
    11

---

title: Operators as functions

- The `operator` module defines f.s representing operators

code: python

    >>> from operator import add, mul
    >>> add(2, 3)
    5
    >>> reduce(add, [3, 5, 2, 1])
    11
    >>> reduce(mul, [3, 5, 2, 1])
    30
    >>> reduce(pow, [2, 3, 4])
    4096

>

Reducing with a non-associative f. is considered bad style, in Python

`(4 ** 3) ** 2 != 4 ** (3 ** 2)`

---

title: Partial with built-ins

- In Python, most f.s accept indifferently positional params, or keyword params
- However, *some built-in f.s and operators* accept only positional params
    - Params have to be passed in a fixed order
    - Cannot partially apply (or even pass) params by name

code: python

    >>> def mypow(x, y): return x ** y  # or a lambda...
    >>> cube = partial(mypow, y=3)
    >>> cube(2)
    8
    >>> cube = partial(pow, y=3)
    >>> cube(2)
    Traceback...
    TypeError: pow() takes no keyword arguments

---

title: Variadic functions

code: python

    def func(required_arg, *args, **kwargs):
        print(required_arg)
        # args is a tuple of positional arguments,
        if args: # if not empty.
            print(args)
        # kwargs is a dictionary of keyword arguments,
        if kwargs: # if not empty.
            print(kwargs)

code: python

    >>> func()
    TypeError: func() takes at least 1 argument (0 given)
    >>> func("required argument", 1, 2, '3', key1=4, key2="foo")
    required argument
    (1, 2, '3')
    {'key2': 'foo', 'key1': 4}

---

title: Positional parameters unpacking

- Call with `*` to unpack params out of a sequence

code: python

    >>> pow(3, 2)
    9

code: python

    >>> values = [3, 2]
    >>> pow(*values)
    9

---

title: Keyword parameters unpacking

- Dictionaries can deliver keyword params with `**`

code: python

    def parrot(voltage, state='a stiff', action='voom'):
        print("-- This parrot wouldn't", action)
        print("if you put", voltage, "volts through it.")
        print("E's", state, "!")

code: python

    >>> d = {"voltage": "four million",
             "state": "bleedin' demised",
             "action": "VOOM"}
    >>> parrot(**d)
    -- This parrot wouldn't VOOM
    if you put four million volts through it.
    E's bleedin' demised !

---

title: Folding
class: segue dark

---

title: Folding

- Recursion on lists, common code structure
    - Usually empty list as edge case
    - `x:xs` pattern, action on head and recursion on rest
- Behaviour encapsulated in *folding* f.s
    - Similar to the `map` f., only they reduce a list to some single value
- A fold takes a binary f., a starting value (accumulator) and a list
    - Binary f. is called with accumulator and head (or tail) and produces a new accumulator
    - Then, f. is called with new accumulator and new head (or tail)...
    - At the end, accumulator holds the result

---

title: Left fold
figure: images/fun/foldl.png

- The `foldl` f. folds the list up from the left side
- Ex.: implement sum using a fold

code: haskell

    sum' :: (Num a) => [a] -> a
    sum' xs = foldl (\acc x -> acc + x) 0 xs

code: haskell

    Prelude> sum' [3,5,2,1]
    11

code: haskell

    foldl' f z [] = z
    foldl' f z (x:xs) = foldl' f (f z x) xs

---

title: Currying to spare params

- The lambda `(\acc x -> acc + x)` is the same as `(+)`
- The `xs` param can be omitted
    - Calling `foldl (+) 0` returns a f. that takes a list
- In general, because of currying ...
    - A f. like `foo a = bar b a` ...
    - Can rewritten as `foo = bar b`

code: haskell

    sum' :: (Num a) => [a] -> a
    sum' = foldl (+) 0

---

title: Fold for membership

code: haskell

    elem' :: (Eq a) => a -> [a] -> Bool
    elem' y ys = foldl (\acc x -> x == y || acc) False ys
    -- if x == y then True else acc

- Accumulator is a `Bool`
    - Accumulator and result have always the same type, in a fold
    - It makes sense to start with `False`, assume the val isn't there
    - On an empty list, result stays `False`
- Then we check: current element is the val we're looking for?
    - Yes: set accumulator to `True`
    - No: leave accumulator unchanged (either `True` or `False`)

---

title: Right fold

- With `foldr`, accumulator eats up values from the right
    - The binary f. has the accumulator as 2nd param
- Ex.: implementing `map` with a right fold
    - Accumulator is a list, accumulating the mapped elements one by one
    - Starting element is an empty list
    - E.g.: try mapping `(+3)` to `[1,2,3]`

code: haskell

    map' :: (a -> b) -> [a] -> [b]
    map' f xs = foldr (\x acc -> f x : acc) [] xs

code: haskell

    foldr' f z [] = z
    foldr' f z (x:xs) = f x (foldr' f z xs)

---

title: Right vs. left fold

- Folding over `[3,4,5,6]`, with `f` and `z` (as f. and accumulator)
    - Right folding: `f 3 (f 4 (f 5 (f 6 z)))`
    - Left folding: `f (f (f (f z 3) 4) 5) 6`


- Ex.: left fold for `map`
    - The `++` f. is much more expensive than `:`
    - Prefer right folds when building up a new list

code: haskell

    map' f xs = foldl (\acc x -> acc ++ [f x]) [] xs

---

title: Power of folds

- Along with maps and filters, folds are one of the most useful tools in functional programming
    - Folds can be used to implement any f. which...
    - traverse a list once, element by element...
    - and then return something based on that
- The `foldl1` and `foldr1` f.s are similar
    - The first (or last) element is the starting value
    - Runtime errors if called with empty lists

---

title: Examples of folds

code: haskell

    maximum' :: (Ord a) => [a] -> a
    maximum' = foldr1 (\x acc -> if x > acc then x else acc)

    reverse' = foldl (\acc x -> x : acc) []

    product' = foldr1 (*)

    filter' p = foldr (\x acc -> if p x then x : acc else acc) []

---

title: Scans

- `scanl` and `scanr` are like `foldl` and `foldr`
    - Only they report all the intermediate accumulator states in a list
    - `scanl`: final result is last element
    - `scanr`: final result is first element
    - There are also `scanl1` and `scanr1`

code: haskell

    Prelude> scanl (+) 0 [3,5,2,1]
    [0,3,8,10,11]
    Prelude> scanr (+) 0 [3,5,2,1]
    [11,8,3,1,0]
    Prelude> scanl1 (\acc x -> if x > acc then x else acc) [3,4,5,3,7,9,2,1]
    [3,4,5,5,7,9,9,9]
    Prelude> scanl (flip (:)) [] [3,2,1]
    [[],[3],[2,3],[1,2,3]]

---

title: Example of scans

- How many elements does it take for the sum of the roots of all natural numbers to exceed 1000?
    - Squares of all natural numbers: `map sqrt [1..]`
    - Then, `scan` shows how the sum progresses
    - Easy to see how many sums are under 1000 (then +1)
    - `takeWhile`, since `filter` doesn't work on infinite lists

code: haskell

    sqrtSums :: Int
    sqrtSums = length (takeWhile (<1000) (scanl1 (+) (map sqrt [1..]))) + 1

    Prelude> sqrtSums
    131
    Prelude> sum (map sqrt [1..131])  -- try also 130
    1005.0942035344083

---

title: Function composition
class: segue dark

---

title: Dollar function

- The `$` f. is also called **function application**

code: haskell

    ($) :: (a -> b) -> a -> b
    f $ x = f x

- Normal f. application (putting a space between two things) has a really high precedence
- The `$` f. has the *lowest precedence*
- It's mostly a convenience f., to spare so many parentheses

---

title: Using dollar

- Same as a parentheses, closed at the far right side
    - `sqrt (3 + 4 + 9)`
    - `sqrt $ 3 + 4 + 9`
    - `sum (map sqrt [1..130])`
    - `sum $ map sqrt [1..130]`
    - `sum (filter (> 10) (map (*2) [2..10]))`
    - `sum $ filter (> 10) $ map (*2) [2..10]`
- Apart from getting rid of parentheses...
    - `$` means that f. application is *yet another* f.
    - Map f. application over a list of f.s

code: haskell

    Prelude> map ($ 3) [(4+), (10*), (^2), sqrt]
    [7.0,30.0,9.0,1.7320508075688772]

---

title: Function composition

- In maths, two f.s can be composed to produce a *new* f.
    - `(f.g)(x) = f(g(x))`
    - Call `g` with param `x`, then call `f` with that result
- In Haskell, `.` does pretty much the same thing
    - `f.g` takes a param of the same type that `g` takes...
    - `f.g` returns a value of the same type that `f` returns
    - `f` takes a param of same type as `g`'s return value

code: haskell

    (.) :: (b -> c) -> (a -> b) -> a -> c
    f . g = \x -> f (g x)

- Ex.: `negate . (* 3)` returns a function that takes a number, multiplies it by 3 and then negates it.

---

title: Use of composition

- Composition: glue simple f.s together, form complex f.s
    - More readable: think about f.s instead of data
    - But long chains of f. composition is discouraged
- Making f.s on the fly, to pass to other f.s
    - Often, clearer and more concise than lambdas
    - Ex.: turn a list of numbers into negative numbers

code: haskell

    Prelude> map (negate . abs) [5,-3,-6,7,-3,2]
    [-5,-3,-6,-7,-3,-2]
    Prelude> map (\x -> negate (abs x)) [5,-3,-6,7,-3,2]
    [-5,-3,-6,-7,-3,-2]

---

title: Chained compositions

- F. composition is right-associative, so we can compose many f.s at a time
- `f (g (z x))` is equivalent to `(f . g . z) x`

code: haskell

    Prelude> map (negate . sum . tail) [[1..5],[3..6],[1..7]]
    [-14,-15,-27]
    Prelude> map (\xs -> negate (sum (tail xs))) [[1..5],[3..6],[1..7]]
    [-14,-15,-27]

---

title: Composition with several params

- Partially apply them so that each f. takes just one param
    - `sum (replicate 5 (max 6.7 8.9))`
    - `(sum . replicate 5 . max 6.7) 8.9`
    - `sum . replicate 5 . max 6.7 $ 8.9`
- To rewrite an expression with a lot of parentheses by using f. composition...
    - First put last param of the innermost f. after a `$`
    - Then compose all other f.s, without their last param
- Example:
    - `replicate 100 (product (map (*3) (zipWith max [1,2,3,4,5] [4,5,6,7,8])))`
    - `replicate 100 . product . map (*3) . zipWith max [1,2,3,4,5] $ [4,5,6,7,8]`

---

title: Tacit programming

- Another common use of f. composition
- Defining f.s in the *point free style* (or *pointless style*)
- Problem if param in the f. body has parentheses after it

code: haskell

    sum' :: (Num a) => [a] -> a
    -- sum' xs = foldl (+) 0 xs
    sum' = foldl (+) 0

code: haskell

    -- fn x = ceiling (negate (tan (cos (max 50 x))))
    fn = ceiling . negate . tan . cos . max 50

---

title: Example of composition

- Ex.: sum of all odd squares that are smaller than 10,000

code: haskell

    oddSquareSum :: Integer
    oddSquareSum = sum (takeWhile (<10000) (filter odd (map (^2) [1..])))

    oddSquareSum' = sum . takeWhile (<10000) . filter odd . map (^2) $ [1..]

    oddSquareSum'' =
        let oddSquares = filter odd $ map (^2) [1..]
            belowLimit = takeWhile (<10000) oddSquares
        in  sum belowLimit

---

title: Exercise
class: break

code: haskell

    Prelude> sum (takeWhile (<10000) (filter odd (map (^2) [1..])))
    166650
    Prelude> sum (takeWhile (<10000) [n^2 | n <- [1..], odd (n^2)])
    166650

    - It won't actually map and filter it right away, it'll delay those actions

---

title: Exercise
class: break

code: haskell

    numLongChains :: Int
    numLongChains = length (filter isLong (map collatz [1..100]))
        where isLong xs = length xs > 15

---

title: Exercise
class: break

code: haskell

    rev xs = rev' xs [] where
      rev' [] acc = acc
      rev' (x:xs) acc = rev' xs (x:acc)


