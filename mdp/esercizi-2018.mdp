title: Esercizi 2018
subtitle: Introduzione alla programmazione
figure: images/dev/geek-girl.jpg

---

title: Esercitazione 1 (10-01)
class: segue dark

---

title: 1.1 Hello, user!
figure: images/misc/handshake.png

- Compilare ed eseguire il programma “`Hello world`”
- In una versione successiva del programma...
- Chiedere il nome all'utente e aggiungere tale nome al messaggio di saluto
- Se il nome dell'utente è “`admin`”, mostrare inoltre il messaggio speciale “`At your command`”

---

title: 1.2 Equazione di secondo grado
figure: images/misc/quadratic-eq.svg images/misc/quadratic-formula.svg

- Chiedere all'utente i tre coefficienti `a, b, c` di una equazione di secondo grado
    - `ax^^2^^ + bx + c = 0`
- Comunicare all'utente che tipo di soluzioni presenta l'equazione
    - Due soluzioni reali
    - Un'unica soluzione reale
    - Nessuna soluzione reale

>

Non è richiesto il valore delle soluzioni

---

title: 1.3 Equazione di 2° grado, con ciclo
figure: images/misc/quadratic-eq.svg images/misc/quadratic-formula.svg

- Riprendere l'esercizio 1.2
- In caso di soluzioni reali, mostrare all'utente il loro valore
- Chiedere infine all'utente se vuole valutare altre equazioni

>

Racchiudere il programma in un ciclo `while` <br>
Usare la funzione `sqrt` del modulo `math`

---

title: 1.4 Quadrati in diagonale
figure: images/misc/diagonal-squares.png

- Chiedere all'utente un numero `n`
- Su un canvas 500x500, disegnare `n` quadrati
    - Tutti delle stesse dimensioni
    - Posizionati lungo tutta la diagonale
    - Ciascuno con un colore casuale

>

Determinare il lato di ogni quadrato in base alla dimensione del canvas

---

title: 1.5 Sequenza di quadrati
figure: images/misc/green-squares.png

- Chiedere all'utente un numero `n`
- Su un canvas 500x500, disegnare `n` quadrati
    - Quadrati con lato decrescente
    - Tutti allineati in alto e a sinistra
- Far variare il colore dei quadrati
    - Dal nero del quadrato più grande
    - Fino al verde del quadrato più piccolo

>

Determinare automaticamente le variazioni migliori per lato e colore, prima di iniziare il ciclo

---

title: 1.6 Triangolo
figure: images/misc/impossible-triangle.jpg

- Chiedere all'utente le lunghezze dei tre lati
- Controllare se il triangolo è:
    - Equilatero
    - Isoscele
    - Scaleno
    - Oppure se i tre lati non formano affatto un triangolo
- Visualizzare il responso

---

title: 1.7 Multipli di 3 o 5

- Chiedere all'utente un numero `n`
- Calcolare la somma di tutti i multipli di 3 o 5 strettamente minori di `n`
    - Un numero `x` è multiplo di `y` se `x % y == 0`

>

Es. `n = 10`. Se elenchiamo tutti numeri minori di 10 che sono multipli di 3 o 5, otteniamo 3, 5, 6 e 9. La somma di questi multipli è 23

Ispirato da: <https://projecteuler.net/problem=1>

---

title: 1.8 Massimo pari
figure: images/misc/data-sequence.png

- Leggere, attraverso un ciclo, una sequenza di numeri naturali
- La sequenza termina quando l'utente inserisce un valore negativo
- Visualizzare il più grande numero pari tra quelli inseriti

---

title: 1.9 Tre carte
figure: images/misc/three-cards.png

- All'inizio l'utente ha 10 monete
- Ad ogni turno:
    - Viene estratto a sorte un numero segreto tra 1 e 3
    - L'utente sceglie quante monete puntare e su quale numero
    - Se indovina, gli viene sommato l'importo puntato
    - Altrimenti gli viene sottratto lo stesso importo
- Il gioco termina quando l'utente perde tutto o si ritira

---

title: Esercitazione 2 (10-08)
class: segue dark

---

title: 2.1 Funzione, Erone
figure: images/misc/triangle-notations.svg

- Definire una funzione `heron` per il calcolo dell'area di un triangolo
    - Parametri: tre lati come `float`
    - Risultato: area come `float`
- Invocare la funzione dalla shell interattiva
- Aggiungere poi al programma una funzione `main`
    - *Procedura, senza parametri e senza risultato*
    - Chiedere all'utente tre valori (chiamando `input`)
    - Poi chiamare `heron` con questi parametri
    - Infine mostrare all'utente il risultato (chiamando `print`)

>

Formula di Erone: `area = sqrt(s * (s - a) * (s - b) * (s - c))` <br>
Con `s = (a + b + c) / 2`, semiperimetro

<http://en.wikipedia.org/wiki/Heron%27s_formula>

---

title: 2.2 Conteggio di 0 e 1
figure: images/repr/binary-tunnel.jpg

- Definire una funzione che conta separatamente il numero di cifre `0` ed `1` presenti in un testo
    - Parametro: stringa di testo da elaborare
    - Risultato: tupla dei due valori conteggiati
- Invocarla da una funzione `main`
    - I/O con l'utente solo nella funzione `main`

>

Nella funzione, usare un ciclo `for` sulla stringa

---

title: 2.3 Classe dei cavi
figure: images/misc/ohm.svg

- Definire una classe per i cavi di rame
- Costruttore con parametri: lunghezza (in *m*) e sezione (in *mm²*)
- Campo costante per resistività
    - `rho = 0.0171    # Ohm*mm²/m`
- Metodo per calcolare la resistenza (in  *Ohm*)
    - `rho * length / area`
- Metodo per calcolare l'intensità di corrente (in *Ampere*), data la tensione (parametro, in *Volt*)
    - `voltage / resistance`
- Nel corpo principale del programma...
    - Creare un oggetto con dati forniti dall'utente
    - Visualizzare resistenza e corrente del cavo

---

title: 2.4 Triangolo di cerchi colorati
figure: images/misc/xmas-triangle.png

- Chiedere all'utente un numero `n`
- Generare `n` righe di cerchi, allineate a sinistra
- Il numero di riga corrisponde al numero di cerchi da disegnare
- Ogni cerchio ha un colore casuale

---

title: 2.5 Animazione pallina
figure: images/oop/anim-wrap.png

- Partire dall'esempio dell'animazione orizzontale, senza classi
    - Aggiungere ad ogni turno anche uno spostamento verticale
    - Quando la pallina arriva ad uno dei 4 bordi...
    - Ricompare dal bordo opposto
- Direzione di movimento scelta dall'utente
    - All'inizio chiedere all'utente `dx` e `dy`
    - Ciascuno limitato tra -5 e +5
- Mostrare l'animazione di una pallina su un canvas

---

title: 2.6 Conteggio fotogrammi
figure: images/oop/anim-wrap.png

- Ripetere l'esercizio 2.5, senza classi, ma fermare la pallina dopo 5 fotogrammi
- Alla pressione di un tasto, se la pallina è ferma:
    - Far ripartire l'animazione, per soli altri 5 fotogrammi

>

Usare una variabile globale per contare i fotogrammi

---

title: 2.7 Pallina modificata
figure: images/oop/anim-wrap.png

- Partire dalla classe `Ball` vista a lezione
- Modificare il metodo `move`
    - Quando la pallina arriva ad uno dei 4 bordi...
    - Ricompare dal bordo opposto

---

title: 2.8 Pallina con conteggio
figure: images/oop/anim-wrap.png

- Definire una propria classe `Ball`
- Incapsula il movimento dell'esercizio 2.6
    - Campi x, y, dx, dy
    - Metodi `move` e `position`
    - Campo per contare i fotogrammi
    - Metodo `go` per far ripartire la pallina (solo se ferma)
- Mostrare l'animazione di una pallina su un canvas
    - Alla pressione di un tasto, viene chiamato il metodo `go`

>

Il metodo `go` riavvia solo il conteggio, ma non sposta la pallina

---

title: 2.9 Albero di cerchi colorati
figure: images/misc/xmas-tree.png

- Chiedere all'utente un numero `n`
- Generare `n` righe di cerchi, allineate al centro
- Il numero di riga corrisponde al numero di cerchi da disegnare
- Ogni cerchio ha un colore casuale
- Aggiungere in fondo una riga con un solo cerchio

---

title: Esercitazione 3 (10-15 *)
class: segue dark

---

title: 3.1 Distanza di Manhattan
figure: images/misc/manhattan-distance.svg

- Definire una funzione per calcolare la *distanza di Manhattan* tra due punti
    - Parametri: `x0, y0, x1, y1`
    - Risultato: `abs(x0 - x1) + abs(y0 - y1)`
- Definire una funzione `main`, in cui:
    - L'utente inserisce le quattro coordinate
    - Viene chiamata la prima funzione
    - Viene stampato il risultato

>

Non usare variabili globali

---

title: 3.2 Classe delle ambulanze

- Un oggetto ambulanza ha tra i suoi campi
    - Codice identificativo testuale (nome)
    - Posizione attuale sulla mappa: `x0, y0`
- Metodo `manhattan_distance(x1, y1)`
    - Calcola la distanza tra ambulanza e punto d'intervento
    - (Percorso su strade ortogonali, non in linea retta)
    - Parametri `x1, y1` indicano il punto d'intervento
- Nella funzione `main`, istanziare un oggetto ambulanza
    - Poi, l'utente fornisce ripetutamente un nuovo punto di intervento
    - Il sistema comunica la distanza stimata dell'ambulanza

---

title: 3.3 Percentuale di maiuscole
figure: images/misc/troll-key.png

- Chiedere una riga di testo all'utente
- Mostrare la percentuale di lettere maiuscole presenti

>

Usare un ciclo `for` sulla stringa

---

title: 3.4 Valori sopra e sotto la media

- Chiedere all'utente una sequenza di interi, terminata da 0
- Calcolare e mostrare il valore medio
- Elencare i valori sotto alla media
- Elencare i valori sopra (o uguali) alla media

>

Aggiungere ciascun valore ad una lista inizialmente vuota, con `append`

---

title: 3.5 Nomi sopra e sotto la media
figure: images/misc/high-scores.jpg

- Chiedere all'utente una sequenza di dati, come coppie *(nome, valore)*
    - Ciascun nome (`str`) è associato ad un valore (`int`)
    - La sequenza termina quando il nome è vuoto
- Calcolare e mostrare il valore medio
- Elencare i nomi con valori sotto alla media
- Elencare i nomi con valori sopra (o uguali) alla media

>

Inserire nella lista delle tuple, cioè coppie *(nome, valore)*

---

title: 3.6 Frogger, rana

- Ridenominare come `Frog` la classe `Turtle` dell'esempio `bounce`
- Alla pressione di un tasto freccia, la rana comincia a muoversi
    - Il movimento prosegue per 5 fotogrammi
    - Poi la rana si ferma
    - I tasti sono inefficaci se la rana è già in movimento
- Il rilascio del tasto non ferma la rana

---

title: 3.7 Frogger, animazione opzionale

- Cambiare il file con le icone dei personaggi
- Per la rana, visualizzare icone diverse durante il salto
- Nel metodo `symbol`, utilizzare il contatore e la direzione per scegliere l'icona

---

title: Esercitazione 4 (10-22)
class: segue dark

---

title: 4.1 Lista rovesciata

- Scrivere una funzione ricorsiva per rovesciare una lista
    - Parametro: `list`
    - Risultato: `list`
- L'output contiene gli stessi elementi dell'input, però in ordine opposto
    `[2, 3, 1, 4]` -> `[4, 1, 3, 2]`

>

Saranno accettate esclusivamente le soluzioni ricorsive

Se lunghezza < 2: la lista resta uguale

Altrimenti: la lista di output è ottenuta rovesciando la lista di input, ad esclusione del primo elemento (ricorsione); al risultato si concatena infine il primo elemento della lista di input

---

title: 4.2 Tabelline in file
figure: images/fun/multiplication-table.jpg

- Chiedere all'utente un numero N
- Stampare a video la tavola pitagorica, fino ad N
    - In ciascuna riga, valori separati da virgola
- Salvare la stessa tavola in un file

---

title: 4.3  Valori in file
figure: images/misc/data-sequence.png

- Si supponga, per esempio, che una misura venga ripetuta due volte al giorno, per più giorni
    - Le misure vengono riportate in un file
    - Una riga del file per ogni giornata
    - Quindi, due misure per ogni riga
- Leggere tutti i valori contenuti in un file di questo tipo
    - Ogni riga riporta due valori reali, separati da virgola
- Visualizzare massimo, minimo e media di tutti i valori letti

>

Usare l'operazione `split` su stringa

Se necessario, provare prima ad elaborare un file con un solo valore per riga

---

title: 4.4 Istogramma con barre orizzontali
figure: images/misc/histogram-rot.png

- Leggere da un file una sequenza di valori (positivi)
- Mostrare un istogramma, in un canvas 600x600
    - Larghezza di ciascuna barra proporzionale al valore corrispondente
    - Rosso di ciascuna barra proporzionale al valore corrispondente
        - Verde e blu invece sempre al massimo
    - La barra più lunga occupa tutto lo spazio disponibile
    - L'altezza del canvas è divisa equamente per le barre

>

Memorizzare i valori in una lista

---

title: 4.5 Lista di ambulanze

- Leggere da un file i dati di una lista di ambulanze
    - Oggetti dell'es. 3.2
    - In ogni riga ci sono i dati completi di una ambulanza: nome e posizione
- Poi, in un ciclo, chiedere all'utente il punto in cui intervenire
- Il sistema sceglie l'ambulanza più rapida per l'intervento
- Comunica all'utente:
    - Il nome dell'ambulanza
    - La stima della distanza di Manhattan tra ambulanza e punto di intervento

---

title: 4.6 Circular infinity
figure: images/misc/crop-circle.jpg

- In un riquadro assegnato, disegnare ricorsivamente dei cerchi, con i centri allineati in verticale
- Tracciare un cerchio contenuto nel riquadro `(x, y, w, h)`
    - `r = h / 2, xc = x + w / 2, yc = y + h / 2`
- Dividere il riquadro in due metà
- Applicare a ciascuno dei due riquadri il processo, ricorsivamente
- Ad ogni livello, cambiare o alternare il colore del cerchio disegnato
- Non disegnare cerchi più piccoli di un pixel

>

Saranno accettate esclusivamente le soluzioni ricorsive

---

title: 4.7 Frogger, automobili
figure: images/misc/frogger.png

- Modificare la classe `Ball` dell'esempio `bounce`
- Il movimento è solo orizzontale
- Quando un oggetto esce da un bordo, riappare dal bordo opposto
- Dare però al movimento uno spazio più ampio dell'arena visibile
    - Ammesse coordinate negative o maggiori del bordo destro
    - In questo modo, l'oggetto riappare con un certo ritardo
- Inserire la classe nel gioco, come `Vehicle`
- Rimuovere la rana quando urta un veicolo

---

title: Esercitazione 5 (10-29)
class: segue dark

---

title: 5.1 Selezione da file

- Leggere riga per riga un file di testo
- Riscrivere in un file di output le stesse righe
- Ma, di ciascuna riga, scrivere solo il testo compreso tra parentesi quadre

>

Segnare in un `bool` se si è letta una parentesi aperta, ma non ancora una parentesi chiusa

---

title: 5.2 Veicoli ed elicotteri

- Definire una classe astratta per i *veicoli* d'intervento
    - Metodo `estimate_time(x, y)` per il calcolo del tempo d'intervento
    - Metodo `name`
- Ridefinire l'*ambulanza* (es. 3.2) come sottoclasse di *veicolo*
    - Richiede `1 minuto` di preparazione alla partenza
    - Viaggia a `90 Km/h`, per la distanza di Manhattan
- Definire una classe *elicottero* come sottoclasse di *veicolo*
    - Richiede `5 minuti` di preparazione
    - Viaggia in linea d'aria a `250 Km/h`

---

title: 5.3 Lista di veicoli

- Leggere da un file i dati di una lista di *veicoli* (*elicotteri* o *ambulanze*, es. 5.2)
    - In ogni riga ci sono i dati completi di un veicolo, compreso il tipo
- Poi, in un ciclo, chiedere all'utente il punto in cui intervenire
- Il sistema sceglie il veicolo più rapido per l'intervento
- Comunica all'utente:
    - Il nome del veicolo
    - La stima del tempo di intervento

---

title: 5.4 Istogramma con barre verticali
figure: images/misc/histogram.png

- Leggere da un file una sequenza di valori (positivi)
- Mostrare un istogramma, in un canvas 600x600
    - Altezza di ciascuna barra proporzionale al valore corrispondente
    - La barra più alta occupa tutto lo spazio disponibile
    - Barre in blu, per valori sotto alla media
    - Barre in rosso, per valori sopra (o uguali) alla media
    - La larghezza del canvas è divisa equamente per le barre

---

title: 5.5 Percorso del cavallo
figure: images/misc/knight-moves.png

- L'utente sceglie dim. scacchiera (>= 5)
- Allocare matrice quadrata di interi (tutti 0)
- In un ciclo, chiedere all'utente x ed y
    - Segnare nella cella il numero di mosse fatte
    - Si può giocare solo nelle celle vuote, ad “L” dall'ultima giocata
    - Dopo ogni mossa, stampare la matrice aggiornata
    - Controllare se la matrice è piena

code: output

        1   14    9   20    3
       24   19    2   15   10
       13    8   25    4   21
       18   23    6   11   16
        7   12   17   22    5

---

title: 5.6 Frogger, zattere
figure: images/misc/frogger.png

- Modificare la classe `Ball` dell'esempio `bounce`
    - Il movimento è solo orizzontale (destra o sinistra)
    - Quando un oggetto esce da un bordo, riappare dal bordo opposto
    - Dare però al movimento uno spazio più ampio dell'arena visibile
- Inserire la classe nel gioco, come `Raft`
- La rana viene trascinata, quando poggia su una zattera
    - Controllare che il centro della rana sia dentro la zattera
    - Quando la rana collide con una zattera, può memorizzarla in un campo
    - Metodo *getter* che ottenere la velocità di una zattera
    - La rana muore, se trascinata fuori dallo schermo

---

title: 5.7 Frogger, fiume
figure: images/misc/frogger.png

- Aggiungere il fiume al gioco Frogger
    - Personaggio fisso
    - Disposto sotto alle zattere (prima, nell'arena)
- Se la rana urta il fiume (ma non una zattera), muore
- Se la rana attraversa il fiume, vince

---

title: Esercitazione 6 (11-05 *)
class: segue dark

---

title: 6.1 Minimo valore, con ricorsione
figure: images/fun/matryoshka.png

- Definire una funzione ricorsiva `min_char`
    - Cerca, in una stringa di testo, il carattere con codice Unicode minimo
- Se il testo ha lunghezza 0, errore
    - `raise ValueError("Empty string")`
- Se il testo ha lunghezza 1, l'unico carattere è il risultato
- Altrimenti il risultato è pari al minore tra:
    - Il primo carattere
    - Il carattere con codice minimo tra tutti gli altri (ricorsione)

>

Saranno accettate esclusivamente le soluzioni ricorsive

---

title: 6.2 Maiuscole in ogni riga

- Leggere un file riga per riga
- Calcolare e visualizzare la percentuale di maiuscole in ogni riga
- Calcolare e visualizzare la percentuale di maiuscole in tutto il file

---

title: 6.3 Matrice casuale

- Chiedere all'utente le dimensioni `w, h` di una matrice
- Riempire la matrice di numeri interi casuali, compresi tra 0 e 15
- Salvare la matrice in un file di testo (*CSV*)
    - Ogni riga della matrice in una riga del file
    - Valori separati tra loro da una virgola
- In un ciclo
    - Chiedere un valore all'utente
    - Contare quante volte quel valore è presente nelle celle di bordo

---

title: 6.4 Knigth's tour, classe
figure: images/misc/knight-moves.png

- Incapsulare il gioco 5.5 in una classe
- Campi per matrice ed altro
- Metodi
    - `play_at(x, y)` per giocare nella data posizione
    - `get_val(x, y)` per conoscere il valore nella data posizione
    - `finished()`, booleano: matrice piena?
- Oggetto istanziato all'avvio del programma
- In un ciclo, esterno alla classe
    - L'utente sceglie x, y per la nuova mossa (chiamata `play_at`)
    - Si stampa la matrice (chiamate `get_val`)

---

title: 6.5 Knigth's tour, GUI

- Completare la classe dell'es. 6.4, implementando tutti i metodi di `BoardGame`
- Utilizzare il gioco con la GUI degli esempi
- Se un giocatore gioca in una cella già piena, tutti i numeri più alti del valore presente vengono rimossi

---

title: 6.6 Frogger, estensioni opzionali
figure: images/misc/frogger.png

- Gioco con due rane, guidate con tasti diversi (ma possibilmente stessa classe)
- Veicoli e zattere con aspetto e dimesione diversa (ma possibilmente stessa classe)
- Tartarughe che si sommergono, coccodrilli ed altri personaggi
- Conteggio delle rane salve, per la conclusione
- Punti, livelli e bonus vari
- Altre estensioni, a fantasia

---

title: 6.7 Frogger, bella copia
figure: images/misc/fair-copy.png

- **Codice leggibile**
    - *Costanti*, anzichè numeri “*magici*” sparsi nel codice
    - *Nomi esplicativi* e semplici
    - *Regole di stile*: `variable_name`, `function_name`, `ClassName`, `CONSTANT_NAME`
    - *Commenti*, quando utili: *function annotation*, *docstring*
- **Codice ben organizzato**
    - *No copia&incolla* del codice: funzioni parametrizzate e/o cicli
    - *Programmazione strutturata*: preferibilmente `return` a fine funzione, cicli senza `break`
    - *OOP*: *incapsulamento*, *ereditarietà*, *polimorfismo*

---

title: Esercitazione 7 (11-12)
class: segue dark

---

title: Esercizi C++
figure: images/dev/cpp.png

- Es. 1.1
- Es. 1.7
- Es. 2.2 -- Restituire un `vector` con due `int`
- Es. 3.3
- Es. 3.4

---

title: 7.6 Campo minato in C++, conteggio
figure: images/misc/mines.png

- Generare una matrice di dimensioni `w, h` e posizionare `n` mine in posizione casuale
    - `w, h, n` scelti dall'utente
    - Le mine non si sovrappongono
- Mostrare la matrice
- In un ciclo
    - Chiedere all'utente una posizione `x, y`
    - Contare quante mine sono presenti nelle 8 celle intorno alla posizione

>

Scegliere il tipo di matrice da utilizzare

---

title: 7.7 FroggerGame e FroggerGui, opzionali

- Classe `FroggerGame`, per gestire il gioco Frogger
    - Inizializzare i personaggi, prendendo i dati da un file di configurazione
    - Incapsulare personaggi ed arena
    - Controllare la conclusione della partita, positiva o negativa
    - Guardare l'esempio nei commenti in `bounce_anim`
- Classe `FroggerGui` per la rappresentazione del gioco
    - Disegno immagini e funzionalità legate a `g2d`
    - Metodi `update`, `key_down` e `key_up`
    - Prendere spunto da `BoardGameGui`

>

Consegna definitiva del progetto: lunedì 19 novembre
