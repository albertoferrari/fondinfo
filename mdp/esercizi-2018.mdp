title: Esercizi 2018
subtitle: Introduzione alla programmazione
figure: images/dev/geek-girl.jpg

---

title: Esercitazione 1 (10-01)
class: segue dark

---

title: 1.1 Hello, user!
figure: images/misc/handshake.png

- Compilare ed eseguire il programma “`Hello world`”
- In una versione successiva del programma...
- Chiedere il nome all'utente e aggiungere tale nome al messaggio di saluto
- Se il nome dell'utente è “`admin`”, mostrare inoltre il messaggio speciale “`At your command`”

---

title: 1.2 Equazione di secondo grado
figure: images/misc/quadratic-eq.svg images/misc/quadratic-formula.svg

- Chiedere all'utente i tre coefficienti `a, b, c` di una equazione di secondo grado
    - `ax^^2^^ + bx + c = 0`
- Comunicare all'utente che tipo di soluzioni presenta l'equazione
    - Due soluzioni reali
    - Un'unica soluzione reale
    - Nessuna soluzione reale

>

Non è richiesto il valore delle soluzioni

---

title: 1.3 Equazione di 2° grado, con ciclo
figure: images/misc/quadratic-eq.svg images/misc/quadratic-formula.svg

- Riprendere l'esercizio 1.2
- In caso di soluzioni reali, mostrare all'utente il loro valore
- Chiedere infine all'utente se vuole valutare altre equazioni

>

Racchiudere il programma in un ciclo `while` <br>
Usare la funzione `sqrt` del modulo `math`

---

title: 1.4 Quadrati in diagonale
figure: images/misc/diagonal-squares.png

- Chiedere all'utente un numero `n`
- Su un canvas 500x500, disegnare `n` quadrati
    - Tutti delle stesse dimensioni
    - Posizionati lungo tutta la diagonale
    - Ciascuno con un colore casuale

>

Determinare il lato di ogni quadrato in base alla dimensione del canvas

---

title: 1.5 Sequenza di quadrati
figure: images/misc/green-squares.png

- Chiedere all'utente un numero `n`
- Su un canvas 500x500, disegnare `n` quadrati
    - Quadrati con lato decrescente
    - Tutti allineati in alto e a sinistra
- Far variare il colore dei quadrati
	- Dal nero del quadrato più grande
	- Fino al verde del quadrato più piccolo

>

Determinare automaticamente le variazioni migliori per lato e colore, prima di iniziare il ciclo

---

title: 1.6 Triangolo
figure: images/misc/impossible-triangle.jpg

- Chiedere all'utente le lunghezze dei tre lati
- Controllare se il triangolo è:
    - Equilatero
    - Isoscele
    - Scaleno
    - Oppure se i tre lati non formano affatto un triangolo
- Visualizzare il responso

---

title: 1.7 Multipli di 3 o 5

- Chiedere all'utente un numero `n`
- Calcolare la somma di tutti i multipli di 3 o 5 strettamente minori di `n`
    - Un numero `x` è multiplo di `y` se `x % y == 0`

>

Es. `n = 10`. Se elenchiamo tutti numeri minori di 10 che sono multipli di 3 o 5, otteniamo 3, 5, 6 e 9. La somma di questi multipli è 23

Ispirato da: <https://projecteuler.net/problem=1>

---

title: 1.8 Massimo pari
figure: images/misc/data-sequence.png

- Leggere, attraverso un ciclo, una sequenza di numeri naturali
- La sequenza termina quando l'utente inserisce un valore negativo
- Visualizzare il più grande numero pari tra quelli inseriti

---

title: 1.9 Tre carte
figure: images/misc/three-cards.png

- All'inizio l'utente ha 10 monete
- Ad ogni turno:
    - Viene estratto a sorte un numero segreto tra 1 e 3
    - L'utente sceglie quante monete puntare e su quale numero
    - Se indovina, gli viene sommato l'importo puntato
    - Altrimenti gli viene sottratto lo stesso importo
- Il gioco termina quando l'utente perde tutto o si ritira

---

title: Esercitazione 2 (10-08)
class: segue dark

---

title: 2.1 Funzione, Erone
figure: images/misc/triangle-notations.svg

- Definire una funzione `heron` per il calcolo dell'area di un triangolo
    - Parametri: tre lati come `float`
    - Risultato: area come `float`
- Invocare la funzione dalla shell interattiva
- Aggiungere poi al programma una funzione `main`
    - *Procedura, senza parametri e senza risultato*
    - Chiedere all'utente tre valori (chiamando `input`)
    - Poi chiamare `heron` con questi parametri
    - Infine mostrare all'utente il risultato (chiamando `print`)

>

Formula di Erone: `area = sqrt(s * (s - a) * (s - b) * (s - c))` <br>
Con `s = (a + b + c) / 2`, semiperimetro

<http://en.wikipedia.org/wiki/Heron%27s_formula>

---

title: 2.2 Conteggio di 0 e 1
figure: images/repr/binary-tunnel.jpg

- Definire una funzione che conta separatamente il numero di cifre `0` ed `1` presenti in un testo
    - Parametro: stringa di testo da elaborare
    - Risultato: tupla dei due valori conteggiati
- Invocarla da una funzione `main`
    - I/O con l'utente solo nella funzione `main`

>

Nella funzione, usare un ciclo `for` sulla stringa

---

title: 2.3 Classe dei cavi
figure: images/misc/ohm.svg

- Definire una classe per i cavi di rame
- Costruttore con parametri: lunghezza (in *m*) e sezione (in *mm²*)
- Campo costante per resistività
    - `rho = 0.0171    # Ohm*mm²/m`
- Metodo per calcolare la resistenza (in  *Ohm*)
    - `rho * length / area`
- Metodo per calcolare l'intensità di corrente (in *Ampere*), data la tensione (parametro, in *Volt*)
    - `voltage / resistance`
- Nel corpo principale del programma...
    - Creare un oggetto con dati forniti dall'utente
    - Visualizzare resistenza e corrente del cavo

---

title: 2.4 Triangolo di cerchi colorati
figure: images/misc/xmas-triangle.png

- Chiedere all'utente un numero `n`
- Generare `n` righe di cerchi, allineate a sinistra
- Il numero di riga corrisponde al numero di cerchi da disegnare
- Ogni cerchio ha un colore casuale

---

title: 2.5 Animazione pallina
figure: images/oop/anim-wrap.png

- Partire dall'esempio dell'animazione orizzontale, senza classi
    - Aggiungere ad ogni turno anche uno spostamento verticale
    - Quando la pallina arriva ad uno dei 4 bordi...
    - Ricompare dal bordo opposto
- Direzione di movimento scelta dall'utente
    - All'inizio chiedere all'utente `dx` e `dy`
    - Ciascuno limitato tra -5 e +5
- Mostrare l'animazione di una pallina su un canvas

---

title: 2.6 Conteggio fotogrammi 
figure: images/oop/anim-wrap.png

- Ripetere l'esercizio 2.5, senza classi, ma fermare la pallina dopo 5 fotogrammi
- Alla pressione di un tasto, se la pallina è ferma:
    - Far ripartire l'animazione, per soli altri 5 fotogrammi

>

Usare una variabile globale per contare i fotogrammi

---

title: 2.7 Pallina modificata
figure: images/oop/anim-wrap.png

- Partire dalla classe `Ball` vista a lezione
- Modificare il metodo `move`
    - Quando la pallina arriva ad uno dei 4 bordi...
    - Ricompare dal bordo opposto

---

title: 2.8 Pallina con conteggio
figure: images/oop/anim-wrap.png

- Definire una propria classe `Ball`
- Incapsula il movimento dell'esercizio 2.6
    - Campi x, y, dx, dy
    - Metodi `move` e `position`
    - Campo per contare i fotogrammi
    - Metodo `go` per far ripartire la pallina (solo se ferma)
- Mostrare l'animazione di una pallina su un canvas
    - Alla pressione di un tasto, viene chiamato il metodo `go`

>

Il metodo `go` riavvia solo il conteggio, ma non sposta la pallina

---

title: 2.9 Albero di cerchi colorati
figure: images/misc/xmas-tree.png

- Chiedere all'utente un numero `n`
- Generare `n` righe di cerchi, allineate al centro
- Il numero di riga corrisponde al numero di cerchi da disegnare
- Ogni cerchio ha un colore casuale
- Aggiungere in fondo una riga con un solo cerchio


