title: Linguaggio C++11
subtitle: Introduzione alla programmazione
figure: images/dev/cpp.png

---

title: Hello, C++

- `cout`: output su console, op. di inserimento `<<`
    - Possibile concatenare pi√π operazioni di scrittura

code: c++

    #include <iostream>
    using namespace std;

    int main() {
        cout << "Hello, C++!" << endl;
    }

---

title: Leggere e scrivere

- `cin`: input da console, op. di estrazione `>>`
    - Possibile concatenare pi√π operazioni di lettura
    - `getline(cin, line)`: lettura intera riga

code: c++

    #include <iostream>
    using namespace std;

    int main() {
        string name;
        int age;
        cout << "Name and age?" << endl;
        cin >> name >> age;
        cout << "Hello, " << name << "." << endl;
        cout << "You're " << age << " years old." << endl;
    }

---

title: Tipizzazione statica
figure: images/algo/my-shoes.png

- Una delle differenze principali: le comuni variabili non sono *riferimenti*, ma *contenitori* di dati
    - Occorrono **dichiarazioni** di tipo
    - Ma possibile *type inference* (`auto`)
- Tipi principali: `int`, `float` e `double`, `bool`, `string` e `char`

code: c++

    int x = 10;
    double h = 3.7;
    string s = "hello";

    auto y = 5;        // type inference
    auto k = 2.2;
    auto t = "hola"s;  // compiler settings: -std=c++14

---

title: Operazioni di base

- Operazioni su numeri: `+, -, *, /, %`
    - Anche incremento e decremento unitario: `++, --`
    - *Attenzione*: la divisione tra interi d√† risultato intero (`trunc`); il resto pu√≤ essere negativo
    - Assegnamento: `=, +=, -=` ...
    - Confronti: `>, >=, <, <=, !=, ==`
    - *Attenzione*: i confronti **non** si possono concatenare
- Operazioni booleane (and, or, not): `&&, ||, !`

code: c++

    cout << (3 < 5) << endl;           // 1
    cout << (3 < 5 < 4) << endl;       // 1 (!)
    cout << (3 < 5 && 5 < 4) << endl;  // 0

---

title: Stringhe

- `string`: sequenza *mutevole* di byte (tipo `char`)
- Operazioni di confronto; concatenazione: `+`
- *Attenzione*: apici doppi per valori `string`, singoli per `char`

code: c++

    string sentence = "Lorem ipsum";
    sentence[6] = 'I';
    cout << sentence[6];  // 'I'

    int n = 5;
    string txt = to_string(n);
    int val = stoi(txt);  // see also `stod`, `stof`...

---

title: Decisioni
figure: images/algo/words.svg

code: c++

    string a, b;
    cin >> a >> b;
    if (a < b) {
        cout << "The words are ordered" << endl;
    } else if (a > b) {
        cout << "The words are inverted" << endl;
    } else {
        cout << "The words are equal" << endl;
    }

>

<http://tomamic.github.io/fondinfo/p1-algoritmi.html#16>

---

title: Iterazioni
figure: images/algo/average.svg

code: c++

    int val, total = 0, count = 0;
    cout << "Val (0 to finish)? ";
    cin >> val;
    while (val != 0) {
        total += val;
        ++count;
        cout << "Val (0 to finish)? ";
        cin >> val;
    }
    if (count > 0) {
        cout << "Avg: " << total / float(count) << endl;
    }

>

<http://tomamic.github.io/fondinfo/p1-algoritmi.html#20>

---

title: Vector, array dinamici
figure: images/fun/shopping-list.jpg

code: c++

    #include <vector>
    // ...

    vector<string> grocery = {"spam", "egg", "beans"};
    cout << grocery[1] << endl;                  // egg
    cout << grocery.size() << endl;              // 3
    grocery[0] = "sausage";                      // replace an element

    grocery.push_back("bacon")                   // add an element to the end
    grocery.pop_back()                           // remove last element

    grocery.insert(begin(grocery) + 1, "bacon")  // other elements shift
    grocery.erase(begin(grocery) + 1)            // remove element at index

>

<http://tomamic.github.io/fondinfo/p3-composizione.html#4>

---

title: Cicli for

code: c++

    for (auto product : grocery) {  // for each product in grocery
        cout << product << endl;
    }

code: c++

    for (int i = 0; i < 5; ++i) {  // for each i : 0 <= i < 5
        cout << i * i << endl;
    }

code: c++

    int i = 0;
    while (i < 5) {  // equivalent while
        cout << i * i << endl;
        ++i;
    }

>

<http://tomamic.github.io/fondinfo/p3-composizione.html#8>

---

title: Somma colonne: matrice

code: c++

    vector<vector<int>> matrix = { {2, 4, 3, 8},
                                   {9, 3, 2, 7},
                                   {5, 6, 9, 1} };
    auto rows = matrix.size();
    auto cols = matrix[0].size();
    for (auto x = 0; x < cols; ++x) {
        auto total = 0;
        for (auto y = 0; y < rows; ++y) {
            total += matrix[y][x];
        }
        cout << "Col #" << x << " sums to " << total << endl;
    }

>

<http://tomamic.github.io/fondinfo/p5-matrici.html#9>

---

title: Appartenenza e allocazione

code: c++

    #include <algorithm>  // find, etc.

code: c++

    auto pos = find(begin(grocery), end(grocery), "egg");
    if (pos != end(grocery)) {
        // true, grocery contains "egg"
        grocery.erase(pos);
    }

code: c++

    vector<string> some_list;
    some_list.assign(10, ""); // 10 strings

code: c++

    vector<vector<char>> some_matrix;
    some_matrix.assign(rows, vector<char>(cols, '-'));

>

<http://tomamic.github.io/fondinfo/p3-composizione.html#4>

---

title: Funzioni

code: c++

    #include <cmath>
    #include <iostream>
    using namespace std;

    double hypotenuse(double a, double b) {
        auto c = sqrt(a * a + b * b);
        return c;
    }

    int main() {
        auto side1 = 3.0, side2 = 4.0;
        auto side3 = hypotenuse(side1, side2);
        cout << "3rd side: " << side3 << endl;
    }

>

<http://tomamic.github.io/fondinfo/p2-oggetti.html#4>

---

title: Output su file

code: c++

    #include <fstream>

code: c++

    ofstream file2{"output.txt"};  // file output stream
    if (file2) {                   // is stream available?
        file2 << "Values: " << n << " " << r << " " << w << endl;
    }
    file2.close();

---

title: Lettura di righe

code: c++

    ifstream file1{"input.txt"};  // when finished, close file1!

code: c++

    string first_line, second_line;
    getline(file1, first_line);   // no newline at end
    getline(file1, second_line);  // no newline at end

code: c++

    string whole_text;
    getline(file1, whole_text, '\0');  // read whole file

code: c++

    // for each line in file1...
    for (string line; getline(file1, line);) {
        cout << line << endl;
    }

>

<http://tomamic.github.io/fondinfo/p5-matrici.html#4>

---

title: Flussi e stringhe

- Si pu√≤ gestire una stringa come uno stream
    - `istringstream`, `ostringstream` in libreria `<sstream>`
    - Per estrarre valori ed inserire valori, rispettivamente

code: c++

    /* Split a text into a sequence of strings */
    string text = "one:two::three";
    istringstream sstr{text};  // a stream view on a string
    for (string item; getline(sstr, item, ':');) {
        cout << item << endl;
    }

---

title: Numeri casuali

code: C++

    #include <iostream>
    #include <cstdlib>
    #include <ctime>
    using namespace std;

    int main() {
        srand(time(nullptr));           // just once! (initial seed
                                        // for random numbers)
        for (int i = 0; i < 10; ++i) {
            int r = rand() % 90;        // random value: 0 <= r < 90
            cout << r << endl;
        }
    }

>

C++11 ha anche una libreria `random`, pi√π avanzata <br>
<http://www.stroustrup.com/C++11FAQ.html#std-random>

---

title: Lettura di dati ü§î

code: c++

    ifstream file1{"input.txt"};

code: c++

    if (file1) {                         // is stream available?
        int n; float r; string w;
        file1 >> n >> r >> w;
    }

code: c++

    for (int val; file1 >> val;) {       // or float, string ...
        cout << setw(4) << val << endl;  // val occupies 4 chars
    }                                    // setw in <iomanip>

code: c++

    file1 >> noskipws;                   // scan also whitespaces
    for (char val; file1 >> val;) {      // for each char in file1
        cout << val << endl;
    }

---

title: Do-while ü§î

code: c++

    int val, tot = 0, count = 0;
    do {
        cout << "Val (0 to end)? ";
        cin >> val;
        if (val != 0) {
            tot += val;
            ++count;
        }
    } while (val != 0);  // the check is at the end
    if (count > 0) {
        cout << "Avg: " << tot / float(count);
    }

---

title: Switch ü§î

code: c++

    int choice; cin >> choice;
    switch (choice) {
        case 1: cout << "First option"; break;
        case 2: cout << "Second option"; break;
        default: cout << "Error";
    }

---

title: Parametri per riferimento ü§î

- Parametri passati per riferimento sono *alias*
    - Le modifiche riguardano anche le variabili esterne
    - Limitarne l'uso!

code: c++

    // pass by reference: external vars can be modified
    void swap(int& m, int& n) {
        int tmp = m;
        m = n; n = tmp;
    }

    int main() {
        int a = 5, b = 7;
        swap(a, b);
        cout << a << " " << b << endl;
    }

---

title: Oggetti
class: segue dark

---

title: Oggetti

- C++: definizione della classe separata dalla implementazione dei metodi
    - Definizione fornita agli utenti
    - Implementazione compilata in libreria
- Sorgenti organizzati in 3 file:
    - `ball.h` ‚Äì definizione della classe
    - `ball.cpp` ‚Äì implementazione dei metodi
    - `main.cpp` ‚Äì applicazione che usa la classe
    - Dall'ambiente di sviluppo: *Add new ‚Üí C++ Class*

---

title: Definizione: ball.h
figure: images/oop/ball-object.svg images/oop/ball-uml.svg
figcaption: Class diagram UML

code: c++

    class Ball {
    public:
        Ball(int x0, int y0);
        void move();
        int get_x();
        int get_y();

        static const int ARENA_W = 320;
        static const int ARENA_H = 240;
        static const int W = 20;
        static const int H = 20;

    private:
        int x; int y;
        int dx; int dy;
    };

---

title: Implementazione: ball.cpp
figure: images/oop/anim-bounce.png

code: c++

    #include "ball.h"

    Ball::Ball(int x0, int y0) {
        x = x0; y = y0; dx = 5; dy = 5;
    }
    void Ball::move() {
        if (!(0 <= x + dx && x + dx <= ARENA_W - W)) dx = -dx;
        if (!(0 <= y + dy && y + dy <= ARENA_H - H)) dy = -dy;
        x += dx; y += dy;
    }
    int Ball::get_x() {
        return x;
    }
    int Ball::get_y() {
        return y;
    }

---

title: Applicazione: main.cpp
figure: images/oop/balls.png

code: c++

    #include "ball.h"
    // ...
    int main() {
        Ball b1{40, 80};
        Ball b2{80, 40};

        for (auto i = 0; i < 25; ++i) {
            b1.move();
            b2.move();
            cout << b1.get_x() << ", " << b1.get_y() << endl;
            cout << b2.get_x() << ", " << b2.get_y() << endl << endl;
        }
    }

---

title: Allocazione dinamica

code: c++

    // ...
    int main() {
        Ball b1{40, 80};
        Ball* b2 = new Ball{80, 40};
        // Ball* alias1 = &b1; // no new ball is created
        // Ball* alias2 = b2;  // no new ball is created

        for (auto i = 0; i < 25; ++i) {
            b1.move();
            b2->move();
            cout << b1.get_x() << ", " << b1.get_y() << endl;
            cout << b2->get_x() << ", " << b2->get_y() << endl << endl;
        }
        delete b2;
    }

---

title: Swig: C++ per moduli Python

code: file: ball.i

    %module ball
    %include "std_string.i"
    %{
    #include "ball.h"
    %}
    %include "ball.h"

code: shell

    swig -python -c++ ball.i
    g++ -fPIC -shared *.cpp *.cxx -I/usr/include/python3.6m -o _$module.so

code: py

    >>> from ball import Ball
    >>> b = Ball(60, 60)
    >>> b.move()
    >>> print(b.get_x(), b.get_y())

---

title: Puntatori
figure: images/oop/pointer.png

- Ogni dato presente in memoria ha un indirizzo: variabile puntatore per memorizzarlo
    - Operatore `&` per indirizzo di un dato
    - Op. `*` per accesso a dato puntato (*dereferenziazione*)

code: c++

    char i = 56;  // a byte
    char* p;      // a ptr to some byte (uninitialized)
    p = &i;       // now p points to i
    *p = *p + 1;  // ++i
    p = nullptr;  // ptr to nothing

- No *garbage collection*: a `new` deve corrispondere `delete`
- *Resource Acquisition Is Initialization (RAII)*
    - *Costruttore* alloca risorse, *distruttore* le libera: `~Ball()`

---

title: Livelli di astrazione
class: segue dark

---

title: Livelli di astrazione
figure: images/oop/actor.svg

- `Actor`: *classe base*
    - Dichiara un metodo `move` ecc.
    - `virtual`: il metodo pu√≤ essere ridefinito nelle sottoclassi (*polimorfo*)
    - `= 0`: il metodo non √® implementato qui (la classe √® *astratta*)

code: c++

    class Actor {
        virtual void move() = 0;
        // ...
    };

---

title: Composizione
figure: images/oop/actors.svg

code: c++

    class Arena {  // ...
    public:
        void add(Actor* a);
        void move_all();
    private:
        vector<Actor*> actors;
    };

code: c++

    void Arena::add(Actor* c) {
        actors.push_back(a);
    }
    void Arena::move_all() {
        for (auto a : actors) a->move();
    }

---

title: Ereditariet√† e polimorfismo

code: c++

    arena->add(new Ball(4, 8));
    arena->add(new Ghost(12,4));
    arena->move_all();

code: c++

    class Ghost: public Actor {
        // ...
        void move() {
            vector<int> vals = {-5, 0, 5};
            int dx = vals[rand() % 3];  // one of {-5, 0, +5}
            int dy = vals[rand() % 3];
            x = (x + dx + arena->width()) % arena->width();
            y = (y + dy + arena->height()) % arena->height();
        }
    };

---

title: Fifteen ‚Äì Gioco astratto
figure: images/qt/fifteen-puzzle.jpg

code: C++

    class BoardGame {
    public:
        virtual void play_at(int x, int y) = 0;
        virtual void flag_at(int x, int y) = 0;
        virtual int cols() = 0;
        virtual int rows() = 0;
        virtual std::string get_val(int x, int y) = 0;
        virtual bool finished() = 0;
        virtual std::string message() = 0;

        virtual ~BoardGame() {}
    };

---

title: Stampa del gioco

code: C++

    void print_game(BoardGame* game) {
        for (auto y = 0; y < game->rows(); ++y) {
            for (auto x = 0; x < game->cols(); ++x) {
                cout << setw(3) << game->get_val(x, y);
            }
            cout << endl;
        }
    }

---

title: Ciclo di gioco

code: C++

    void play_game(BoardGame* game) {
        print_game(game);

        while (! game->finished()) {
            auto x = 0, y = 0;
            cout << endl << "Move? ";
            cin >> x >> y;

            game->play_at(x, y);
            print_game(game);
        }
        cout << game->message() << endl;
    }

---

title: Qt
class: segue dark break

---

title:  Rettangoli e cerchi con Qt
figure: images/qt/slogan.png images/oop/raster-coord.png

code: C++

    #include <QtWidgets>

code: C++

    QPixmap screen{600, 400}; QPainter painter{&screen};

    painter.setBrush(QColor{255, 255, 0});
    painter.drawRect(50, 75, 90, 50);

    painter.setBrush(QColor{0, 0, 255});
    painter.drawEllipse(QPoint{300, 50}, 20, 20);

    QLabel label; label.setPixmap(screen); label.show();

code: Project

    QT += widgets
    CONFIG += console c++11

>

Progetto: *Application* ‚Üí *Qt Widgets Application*

---

title: Ciclo di animazione in Qt

code: C++

    // fields: int x = 0; QPixmap image{"ball.png"};

    Widget::Widget() {
        startTimer(1000 / 60);  // 60 fps
    }
    void Widget::timerEvent(QTimerEvent* event) {
        x = (x + 5) % 600;  // or width()
        update();           // async: this widget should be redrawn
    }
    void Widget::paintEvent(QPaintEvent* event) {
        QPainter painter{this};
        painter.drawPixmap(x, 10, image);
    }

>

Progetto: *Application* ‚Üí *Qt Widgets Application*

---

title: Fifteen ‚Äì Gui generica
figure: images/qt/puzzle.png

code: C++

    class BoardGameGui : public QWidget {
        Q_OBJECT
    public:
        BoardGameGui(BoardGame* game);
        void handle_click(int x, int y);
        void update_button(int x, int y);
        void update_all_buttons();
    private:
        BoardGame* game_;
        int cols_, rows_;
    };

---

title: Strutture dati lineari
class: segue dark

---

title: Vector, array dinamici
figure: images/fun/dynamic-array.svg
class: large-figure

- **Array**: area di memoria che contiene in *celle contigue* elementi tutti dello *stesso tipo*
- Usato internamente dai `vector` del C++
    - Riallocazione dinamica e trasparente per inserimenti e rimozioni
- `Vector` come **array dinamici**
    - Accesso casuale: `O(1)`
    - Aggiunta o rimozione in fondo all'array: `O(1)`, ma a volte riallocazione
    - Inserimento o rimozione: `O(n)`

---

title: Vector di float

code: C++

    class FloatVector {  // ...
        int capacity_;
        int size_;
        float* data_;
    public:
        FloatVector(int size, float val);
        float get(int pos);
        void set(int pos, float val);
        void insert(int pos, float val);
        float remove(int pos);
        int size();
    };

Implementazione nel repository di esempi

---

title: Inserimento in vector

code: C++

    void FloatVector::insert(int pos, float val) {
        if (pos < 0 || pos > size_) throw out_of_range("wrong pos");
        if (size_ == capacity_) expand_capacity();
        for (int i = size_; i > pos; --i) data_[i] = data_[i - 1];
        data_[pos] = val;
        ++size_;
    }
    void FloatVector::expand_capacity() {
        capacity_ *= 2;
        float* bigger = new float[capacity_];
        for (int i = 0; i < size_; i++) bigger[i] = data_[i];
        delete[] data_;
        data_ = bigger;
    }

---

title: Liste concatenate

![](images/fun/linked-list.svg)

- Ciascun **nodo** contiene un *valore* della lista ed un *puntatore* al nodo successivo
    - Accesso casuale: `O(n)`
    - Aggiunta o rimozione in testa all'array: `O(1)`
    - Aggiunta o rimozione in fondo all'array: `O(n)`, oppure `O(1)` se noto ultimo nodo
    - Inserimento o rimozione: `O(1) + O(n)` per ricerca

---

title: Lista di float

code: C++

    struct Node {
        float val;
        Node* next;
    };
    class FloatList {  // ...
        Node* head_; int size_;
    public:
        FloatList(int size, float val);
        float get(int pos);
        void set(int pos, float val);
        void insert(int pos, float val);
        float remove(int pos);
        int size();
    };

Implementazione nel repository di esempi

---

title: Inserimento in lista

code: C++

    void FloatList::insert(int pos, float val) {
        if (pos < 0 || pos > size_) throw out_of_range("wrong pos");
        if (pos == 0) {
            head_ = new Node{val, head_};
        } else {
            Node* n = head_;
            for (int i = 0; i < pos - 1; ++i) n = n->next;
            n->next = new Node{val, n->next};
        }
        ++size_;
    }

---

title: Template C++

- **Programmazione generica**: codice che opera su *tipi parametrizzati*
    - Es. liste di `int`, `string` ecc.: cambia solo il tipo di dato!
- **Template**: meccanismo di programmazione generica in C++
    - Generaz. trasparente di codice specializzato per un tipo
    - Es. `vector<float>` genera una classe ‚âà `FloatVector`

code: C++

    template <class T>
    T max(T a, T b) {
        if (a >= b) return a;
        return b;
    }

code: C++

    double x = max<double>(5.0, 3.5);  # <double>, <int>: optional
    int i = max<int>(4, 6);            # inferred from parameters


