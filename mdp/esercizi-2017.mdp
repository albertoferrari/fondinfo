title: Esercizi 2017
subtitle: Introduzione alla programmazione
figure: images/misc/geek-girl.jpg

---

title: Esercitazione 1
subtitle: 2017-10-02
class: segue dark

---

title: 1.1 Hello, user!
figure: images/misc/handshake.png

- Compilare ed eseguire il programma “`Hello world`”
- In una versione successiva del programma...
- Chiedere il nome all'utente e aggiungere tale nome al messaggio di saluto
- Se il nome dell'utente è “`admin`”, mostrare inoltre il messaggio speciale “`At your command`”

---

title: 1.2 Anni bisestili

- Chiedere all'utente di inserire un anno
- Dire se è bisestile oppure no
- Ripetere tutto ciclicamente, finchè l'utente non inserisce il valore `0`

>

Un anno è bisestile se il suo numero è divisibile per 4, con l'eccezione degli anni secolari (quelli divisibili per 100) che non sono divisibili per 400

---

title: 1.3 Cerchi casuali
figure: images/misc/random-circles.png

- Chiedere all'utente un numero `n`
- Disegnare `n` cerchi
    - Tutti con raggio di 50 pixel
    - Ciascuno in posizione casuale
    - Ciascuno con un colore casuale

>

Cominciare a disegnare un solo cerchio grigio, in posizione casuale

---

title: 1.4 Cerchi concentrici graduali
figure: images/misc/red-circles.png

- Chiedere all'utente il numero di cerchi da disegnare
- Disegnare i cerchi con raggio gradualmente decrescente, ma tutti con lo stesso centro
- Far variare il colore dei cerchi
	  - Dal rosso del livello più esterno
	  - Fino al nero del livello più interno
- Prima del ciclo, determinare di quanto cambiare raggio e colore ad ogni passo

>

Per iniziare, inserire l'operazione di disegno un ciclo, togliendo ad ogni passo `10` (p.es.) al raggio e al livello di rosso


---

title: 1.5 Cerchi concentrici casuali

- Disegnare un cerchio di raggio 200 e colore casuale
- Disegnare dei cerchi concentrici, via via più piccoli
- Per ognuno, scegliere casualmente raggio e colore
- Fermarsi quando il raggio diventa più piccolo di 10

---

title: 1.6 Carattere Unicode
figure: images/misc/characters.png

- Chiedere all'utente un numero
- Visualizzare il carattere Unicode corrispondente
- Ripetere le operazioni in un ciclo, finchè l'utente non inserisce il valore `0`

>

Usare la funzione `chr` per convertire un codice nel char corrispondente

---

title: 1.7 Tabella ASCII

- Visualizzare la tabella dei codici ASCII
- Un carattere per ogni riga
    - All'inizio della riga: il carattere
    - Di fianco: il codice ASCII
- Limitare l'intervallo tra 32 a 126 (due costanti)

>

Non c'è input dell'utente

---

title: 1.8 Massimo e minimo
figure: images/misc/data-sequence.png

- Chiedere all'utente, attraverso un ciclo, una sequenza di numeri naturali
    - La sequenza termina quando si legge un valore negativo (non valido)
- Visualizzare il valore massimo e quello minimo tra i numeri inseriti

---

title: 1.9 Skyscrapers
figure: images/misc/histogram.png

- Chiedere all'utente, attraverso un ciclo, una sequenza di numeri naturali
    - La sequenza termina quando si legge un valore negativo (non valido)
- Quante volte è cambiato il massimo?
    - Per ogni valore inserito, controllare se è il massimo osservato
- Al termine, scrivere il risultato

>

Da sinistra a destra, quanti “tetti” si vedono? (Nell'esempio: 6)

---

title: Esercitazione 2
subtitle: 2017-10-09
class: segue dark

---

title: 2.1 Percentuale di cifre
figure: images/misc/numbers.jpg

- Chiedere una riga di testo all'utente
- Mostrare la percentuale di cifre presenti

>

Usare un ciclo `for` sulla stringa

---

title: 2.2 Lista di valori
figure: images/misc/data-sequence.png

- Chiedere all'utente una sequenza in numeri naturali
- La sequenza termina quando l'utente inserisce un valore negativo
- Quanti valori sono maggiori dell'ultimo valido inserito?

---

title: 2.3 Funzione, densità
figure: images/misc/snow-ball.png

- Definire una funzione `sphere_density` per il calcolo della densità di una sfera
    - Parametri: raggio in metri e massa in Kg
    - Risultato: densità (tutti valori `float`)
- Invocare la funzione dalla shell interattiva
- Aggiungere poi al programma una funzione `main`
    - *Procedura, senza parametri e senza risultato*
    - Chiedere all'utente due valori (chiamando `input`)
    - Poi chiamare `sphere_density` con questi parametri
    - Infine mostrare all'utente il risultato (chiamando `print`)

>

Formule utili: V = (4/3)πR^^3^^ ; ρ = m / V

---

title: 2.4 Conteggio di singole cifre
figure: images/misc/numbers.jpg

- Chiedere una riga di testo all'utente
- Contare separatamente le occorrenze di ciascuna cifra (da `'0'` a `'9'`)

>

Creare una lista (array) di 10 elementi, inizialmente tutti posti a `0`

Ciascun elemento è il contatore per una certa cifra

Attenzione alla distinzione tra il tipo `str` ed il tipo `int`!

---

title: 2.5 Skyscrapers, da destra
figure: images/misc/histogram.png

- Chiedere all'utente una sequenza in numeri naturali
- La sequenza termina quando l'utente inserisce un valore negativo
- Quante volte cambia il massimo, osservando la sequenza al contrario?

>

Da destra a sinistra, quanti “tetti” si vedono? (Nell'esempio: 5)

La funzione `reversed` restituisce una sequenza rovesciata

---

title: 2.6 Griglia di colori
figure: images/misc/color-grid.png images/oop/raster-tile.png

- Chidere all'utente dei valori per `rows` e `cols`
- Mostrare una griglia di rettangoli di dimensione `rows×cols`
- Partire da un rettangolo nero in alto a sinistra
- In orizzontale, aumentare gradatamente la componente di blu
- In verticale, aumentare gradatamente la componente di verde

>

Cominciare a creare una griglia di riquadri tutti neri, con due cicli `for` annidati

Lasciare tra i riquadri un piccolo margine

---

title: 2.7 Conteggio lettere iniziali uguali

- Scrivere una funzione `len_common_prefix`
    - Paramteri: `a` e `b`, stringhe da confrontare
    - Risultato: numero di lettere iniziali uguali tra `a` e `b`
- Scrivere una funzione `main`
    - Chiedere all'utente due stringhe di testo, `s1` e `s2`
    - Invocare `len_common_prefix` sulle due stringhe
    - Mostrare all'utente il risultato

---

title: 2.8 Movimento diagonale
figure: images/oop/border.png

- Partire dall'esempio del rettangolo in moto orizzontale
    - Spostamento costante denominato `dx`
- Fare in modo che il movimento sia in diagonale
    - Ad ogni turno, aggiungere ad una variabile `y`...
    - Una quantità costante `dy`
- Quando la pallina raggiunge il bordo destro, non lo supera
    - La `x` rimane fissa al valore massimo
    - La `y` può ancora cambiare
- Quando la pallina raggiunge il bordo inferiore, non lo supera
    - La `y` rimane al valore massimo
    - La `x` può ancora cambiare

---

title: 2.9 Controllo da tastiera
figure: images/oop/border.png

- Riprendere l'esercizio 2.8
- Controllare la pressione dei tasti freccia
    - Impostare il solo segno di `dx`, se premuta una freccia orizzontale
    - Impostare il solo segno di `dy`, se premuta una freccia verticale
    - Nella funzione di gestione tasti, non modificare nè `x`, nè `y`
- Lontano dai bordi, il movimento rimane sempre in una delle quattro *direzioni diagonali*
    - Quando la pallina raggiunge uno dei bordi, non lo supera
    - Ma continua a muoversi sul bordo, fino all'angolo

